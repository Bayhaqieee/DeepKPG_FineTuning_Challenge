{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c0d4f18a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-11T06:43:54.490117Z",
     "iopub.status.busy": "2025-02-11T06:43:54.489883Z",
     "iopub.status.idle": "2025-02-11T06:43:55.325232Z",
     "shell.execute_reply": "2025-02-11T06:43:55.324339Z"
    },
    "papermill": {
     "duration": 0.842446,
     "end_time": "2025-02-11T06:43:55.326822",
     "exception": false,
     "start_time": "2025-02-11T06:43:54.484376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'DeepKPG'...\r\n",
      "remote: Enumerating objects: 147, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (147/147), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (119/119), done.\u001b[K\r\n",
      "remote: Total 147 (delta 48), reused 105 (delta 22), pack-reused 0 (from 0)\u001b[K\r\n",
      "Receiving objects: 100% (147/147), 120.95 KiB | 6.05 MiB/s, done.\r\n",
      "Resolving deltas: 100% (48/48), done.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/uclanlp/DeepKPG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "678dbf26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:43:55.336109Z",
     "iopub.status.busy": "2025-02-11T06:43:55.335876Z",
     "iopub.status.idle": "2025-02-11T06:44:37.214691Z",
     "shell.execute_reply": "2025-02-11T06:44:37.213605Z"
    },
    "papermill": {
     "duration": 41.885597,
     "end_time": "2025-02-11T06:44:37.216842",
     "exception": false,
     "start_time": "2025-02-11T06:43:55.331245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m26.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.0/54.0 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.4/44.4 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Building wheel for deepspeed (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.0/84.0 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hCollecting git+https://github.com/huggingface/accelerate\r\n",
      "  Cloning https://github.com/huggingface/accelerate to /tmp/pip-req-build-ydv1oumk\r\n",
      "  Running command git clone --filter=blob:none --quiet https://github.com/huggingface/accelerate /tmp/pip-req-build-ydv1oumk\r\n",
      "  Resolved https://github.com/huggingface/accelerate to commit 5cc99e6e02d32110462d7e4481383811235b7220\r\n",
      "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "Requirement already satisfied: numpy<3.0.0,>=1.17 in /usr/local/lib/python3.10/dist-packages (from accelerate==1.4.0.dev0) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from accelerate==1.4.0.dev0) (24.2)\r\n",
      "Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from accelerate==1.4.0.dev0) (5.9.5)\r\n",
      "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from accelerate==1.4.0.dev0) (6.0.2)\r\n",
      "Requirement already satisfied: torch>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from accelerate==1.4.0.dev0) (2.5.1+cu121)\r\n",
      "Requirement already satisfied: huggingface_hub>=0.21.0 in /usr/local/lib/python3.10/dist-packages (from accelerate==1.4.0.dev0) (0.28.1)\r\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.10/dist-packages (from accelerate==1.4.0.dev0) (0.4.5)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (3.17.0)\r\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (2024.9.0)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (2.32.3)\r\n",
      "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (4.67.1)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (4.12.2)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (2.4.1)\r\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=2.0.0->accelerate==1.4.0.dev0) (3.4.2)\r\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=2.0.0->accelerate==1.4.0.dev0) (3.1.4)\r\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch>=2.0.0->accelerate==1.4.0.dev0) (1.13.1)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch>=2.0.0->accelerate==1.4.0.dev0) (1.3.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=2.0.0->accelerate==1.4.0.dev0) (3.0.2)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (2024.2.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (3.4.1)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub>=0.21.0->accelerate==1.4.0.dev0) (2025.1.31)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy<3.0.0,>=1.17->accelerate==1.4.0.dev0) (2024.2.0)\r\n",
      "Building wheels for collected packages: accelerate\r\n",
      "  Building wheel for accelerate (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Created wheel for accelerate: filename=accelerate-1.4.0.dev0-py3-none-any.whl size=339602 sha256=2b1f8a448891714bf264de180ec92839ca9a5f42ae2ed09a0ed6a83b2eea4579\r\n",
      "  Stored in directory: /tmp/pip-ephem-wheel-cache-19e6i9kx/wheels/f6/c7/9d/1b8a5ca8353d9307733bc719107acb67acdc95063bba749f26\r\n",
      "Successfully built accelerate\r\n",
      "Installing collected packages: accelerate\r\n",
      "  Attempting uninstall: accelerate\r\n",
      "    Found existing installation: accelerate 1.2.1\r\n",
      "    Uninstalling accelerate-1.2.1:\r\n",
      "      Successfully uninstalled accelerate-1.2.1\r\n",
      "Successfully installed accelerate-1.4.0.dev0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install -q deepspeed\n",
    "!pip install -q datasets\n",
    "!pip install -q evaluate\n",
    "!pip install -q gdown\n",
    "!pip install -q accelerate\n",
    "!pip install git+https://github.com/huggingface/accelerate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb64fdf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:44:37.228645Z",
     "iopub.status.busy": "2025-02-11T06:44:37.228375Z",
     "iopub.status.idle": "2025-02-11T06:44:38.806742Z",
     "shell.execute_reply": "2025-02-11T06:44:38.805784Z"
    },
    "papermill": {
     "duration": 1.585704,
     "end_time": "2025-02-11T06:44:38.808250",
     "exception": false,
     "start_time": "2025-02-11T06:44:37.222546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!mkdir -p /kaggle/working/DeepKPG/data\n",
    "\n",
    "!cp -r /kaggle/input/datakp/kp20k-original-10k/train /kaggle/working/DeepKPG/data/scikp\n",
    "!cp -r /kaggle/input/datakp/kp20k-original-10k/test /kaggle/working/DeepKPG/data/scikp\n",
    "!cp -r /kaggle/input/datakp/kp20k-original-10k/valid /kaggle/working/DeepKPG/data/scikp\n",
    "!cp -r /kaggle/input/datasetkp/kp20k-original-10k /kaggle/working/DeepKPG/data/kp20k-original"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a58ac43e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:44:38.820284Z",
     "iopub.status.busy": "2025-02-11T06:44:38.820028Z",
     "iopub.status.idle": "2025-02-11T06:44:38.831526Z",
     "shell.execute_reply": "2025-02-11T06:44:38.830647Z"
    },
    "papermill": {
     "duration": 0.019268,
     "end_time": "2025-02-11T06:44:38.832724",
     "exception": false,
     "start_time": "2025-02-11T06:44:38.813456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting /kaggle/working/DeepKPG/sequence_generation/seq2seq/run_finetune_kpgen_seq2seq_hf.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile /kaggle/working/DeepKPG/sequence_generation/seq2seq/run_finetune_kpgen_seq2seq_hf.py\n",
    "\n",
    "#!/usr/bin/env python\n",
    "# coding=utf-8\n",
    "# based on https://github.com/huggingface/transformers/blob/v4.16.2/examples/pytorch/summarization/run_summarization.py\n",
    "\"\"\"\n",
    "Fine-tuning a 🤗 Transformers model on keyphrase generation.\n",
    "\"\"\"\n",
    "\n",
    "import logging\n",
    "import os\n",
    "import sys\n",
    "from dataclasses import dataclass, field\n",
    "from typing import Optional\n",
    "\n",
    "import datasets\n",
    "import nltk\n",
    "import numpy as np\n",
    "import random\n",
    "from datasets import load_dataset\n",
    "from evaluate import load as load_metric\n",
    "\n",
    "import transformers\n",
    "from filelock import FileLock\n",
    "from transformers import (\n",
    "    AutoConfig,\n",
    "    AutoModelForSeq2SeqLM,\n",
    "    AutoTokenizer,\n",
    "    DataCollatorForSeq2Seq,\n",
    "    HfArgumentParser,\n",
    "    Seq2SeqTrainer,\n",
    "    Seq2SeqTrainingArguments,\n",
    "    set_seed,\n",
    ")\n",
    "from transformers.file_utils import is_offline_mode\n",
    "from transformers.trainer_utils import get_last_checkpoint\n",
    "from transformers.utils import check_min_version\n",
    "from transformers.utils.versions import require_version\n",
    "from transformers.integrations import TensorBoardCallback\n",
    "\n",
    "\n",
    "# Will error if the minimal version of Transformers is not installed. Remove at your own risks.\n",
    "check_min_version(\"4.15.0\")\n",
    "\n",
    "require_version(\"datasets>=1.8.0\", \"To fix: pip install -r examples/pytorch/summarization/requirements.txt\")\n",
    "\n",
    "logger = logging.getLogger(__name__)\n",
    "consoleHandler = logging.StreamHandler()\n",
    "logger.addHandler(consoleHandler)\n",
    "\n",
    "try:\n",
    "    nltk.data.find(\"tokenizers/punkt\")\n",
    "except (LookupError, OSError):\n",
    "    if is_offline_mode():\n",
    "        raise LookupError(\n",
    "            \"Offline mode: run this script without TRANSFORMERS_OFFLINE first to download nltk data files\"\n",
    "        )\n",
    "    with FileLock(\".lock\") as lock:\n",
    "        nltk.download(\"punkt\", quiet=True)\n",
    "\n",
    "\n",
    "@dataclass\n",
    "class ModelArguments:\n",
    "    \"\"\"\n",
    "    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.\n",
    "    \"\"\"\n",
    "\n",
    "    model_name_or_path: str = field(\n",
    "        metadata={\"help\": \"Path to pretrained model or model identifier from huggingface.co/models\"}\n",
    "    )\n",
    "    config_name: Optional[str] = field(\n",
    "        default=None, metadata={\"help\": \"Pretrained config name or path if not the same as model_name\"}\n",
    "    )\n",
    "    tokenizer_name: Optional[str] = field(\n",
    "        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n",
    "    )\n",
    "    cache_dir: Optional[str] = field(\n",
    "        default=None,\n",
    "        metadata={\"help\": \"Where to store the pretrained models downloaded from huggingface.co\"},\n",
    "    )\n",
    "    use_fast_tokenizer: bool = field(\n",
    "        default=True,\n",
    "        metadata={\"help\": \"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"},\n",
    "    )\n",
    "    model_revision: str = field(\n",
    "        default=\"main\",\n",
    "        metadata={\"help\": \"The specific model version to use (can be a branch name, tag name or commit id).\"},\n",
    "    )\n",
    "    use_auth_token: bool = field(\n",
    "        default=False,\n",
    "        metadata={\n",
    "            \"help\": \"Will use the token generated when running `transformers-cli login` (necessary to use this script \"\n",
    "            \"with private models).\"\n",
    "        },\n",
    "    )\n",
    "    resize_position_embeddings: Optional[bool] = field(\n",
    "        default=None,\n",
    "        metadata={\n",
    "            \"help\": \"Whether to automatically resize the position embeddings if `max_source_length` exceeds \"\n",
    "            \"the model's position embeddings.\"\n",
    "        },\n",
    "    )\n",
    "\n",
    "\n",
    "@dataclass\n",
    "class DataTrainingArguments:\n",
    "    \"\"\"\n",
    "    Arguments pertaining to what data we are going to input our model for training and eval.\n",
    "    \"\"\"\n",
    "\n",
    "    dataset_name: Optional[str] = field(\n",
    "        default=None, metadata={\"help\": \"The name of the dataset to use (via the datasets library).\"}\n",
    "    )\n",
    "    dataset_config_name: Optional[str] = field(\n",
    "        default=None, metadata={\"help\": \"The configuration name of the dataset to use (via the datasets library).\"}\n",
    "    )\n",
    "    src_column: Optional[str] = field(\n",
    "        default=None,\n",
    "        metadata={\"help\": \"The name of the column in the datasets containing the source texts (for keyphrase generation).\"},\n",
    "    )\n",
    "    tgt_column: Optional[str] = field(\n",
    "        default=None,\n",
    "        metadata={\"help\": \"The name of the column in the datasets containing the keyphrases (for keyphrase generation).\"},\n",
    "    )\n",
    "    train_file: Optional[str] = field(\n",
    "        default=None, metadata={\"help\": \"The input training data file (a jsonlines or csv file).\"}\n",
    "    )\n",
    "    validation_file: Optional[str] = field(\n",
    "        default=None,\n",
    "        metadata={\n",
    "            \"help\": \"An optional input evaluation data file to evaluate the metrics (rouge) on \"\n",
    "            \"(a jsonlines or csv file).\"\n",
    "        },\n",
    "    )\n",
    "    test_file: Optional[str] = field(\n",
    "        default=None,\n",
    "        metadata={\n",
    "            \"help\": \"An optional input test data file to evaluate the metrics (rouge) on \" \"(a jsonlines or csv file).\"\n",
    "        },\n",
    "    )\n",
    "    overwrite_cache: bool = field(\n",
    "        default=False, metadata={\"help\": \"Overwrite the cached training and evaluation sets\"}\n",
    "    )\n",
    "    preprocessing_num_workers: Optional[int] = field(\n",
    "        default=None,\n",
    "        metadata={\"help\": \"The number of processes to use for the preprocessing.\"},\n",
    "    )\n",
    "    max_source_length: Optional[int] = field(\n",
    "        default=1024,\n",
    "        metadata={\n",
    "            \"help\": \"The maximum total input sequence length after tokenization. Sequences longer \"\n",
    "            \"than this will be truncated, sequences shorter will be padded.\"\n",
    "        },\n",
    "    )\n",
    "    max_target_length: Optional[int] = field(\n",
    "        default=128,\n",
    "        metadata={\n",
    "            \"help\": \"The maximum total sequence length for target text after tokenization. Sequences longer \"\n",
    "            \"than this will be truncated, sequences shorter will be padded.\"\n",
    "        },\n",
    "    )\n",
    "    val_max_target_length: Optional[int] = field(\n",
    "        default=None,\n",
    "        metadata={\n",
    "            \"help\": \"The maximum total sequence length for validation target text after tokenization. Sequences longer \"\n",
    "            \"than this will be truncated, sequences shorter will be padded. Will default to `max_target_length`.\"\n",
    "            \"This argument is also used to override the ``max_length`` param of ``model.generate``, which is used \"\n",
    "            \"during ``evaluate`` and ``predict``.\"\n",
    "        },\n",
    "    )\n",
    "    pad_to_max_length: bool = field(\n",
    "        default=False,\n",
    "        metadata={\n",
    "            \"help\": \"Whether to pad all samples to model maximum sentence length. \"\n",
    "            \"If False, will pad the samples dynamically when batching to the maximum length in the batch. More \"\n",
    "            \"efficient on GPU but very bad for TPU.\"\n",
    "        },\n",
    "    )\n",
    "    max_train_samples: Optional[int] = field(\n",
    "        default=None,\n",
    "        metadata={\n",
    "            \"help\": \"For debugging purposes or quicker training, truncate the number of training examples to this \"\n",
    "            \"value if set.\"\n",
    "        },\n",
    "    )\n",
    "    max_eval_samples: Optional[int] = field(\n",
    "        default=None,\n",
    "        metadata={\n",
    "            \"help\": \"For debugging purposes or quicker training, truncate the number of evaluation examples to this \"\n",
    "            \"value if set.\"\n",
    "        },\n",
    "    )\n",
    "    max_predict_samples: Optional[int] = field(\n",
    "        default=None,\n",
    "        metadata={\n",
    "            \"help\": \"For debugging purposes or quicker training, truncate the number of prediction examples to this \"\n",
    "            \"value if set.\"\n",
    "        },\n",
    "    )\n",
    "    num_beams: Optional[int] = field(\n",
    "        default=1,\n",
    "        metadata={\n",
    "            \"help\": \"Number of beams to use for evaluation. This argument will be passed to ``model.generate``, \"\n",
    "            \"which is used during ``evaluate`` and ``predict``.\"\n",
    "        },\n",
    "    )\n",
    "    ignore_pad_token_for_loss: bool = field(\n",
    "        default=True,\n",
    "        metadata={\n",
    "            \"help\": \"Whether to ignore the tokens corresponding to padded labels in the loss computation or not.\"\n",
    "        },\n",
    "    )\n",
    "    source_prefix: Optional[str] = field(\n",
    "        default=None, metadata={\"help\": \"A prefix to add before every source text (useful for T5 models).\"}\n",
    "    )\n",
    "\n",
    "    def __post_init__(self):\n",
    "        if self.dataset_name is None and self.train_file is None and self.validation_file is None:\n",
    "            raise ValueError(\"Need either a dataset name or a training/validation file.\")\n",
    "        else:\n",
    "            if self.train_file is not None:\n",
    "                extension = self.train_file.split(\".\")[-1]\n",
    "                assert extension in [\"csv\", \"json\"], \"`train_file` should be a csv or a json file.\"\n",
    "            if self.validation_file is not None:\n",
    "                extension = self.validation_file.split(\".\")[-1]\n",
    "                assert extension in [\"csv\", \"json\"], \"`validation_file` should be a csv or a json file.\"\n",
    "        if self.val_max_target_length is None:\n",
    "            self.val_max_target_length = self.max_target_length\n",
    "\n",
    "\n",
    "kpgen_name_mapping = {\n",
    "    \"kp20k\": (\"src\", \"tgt\"),\n",
    "}\n",
    "\n",
    "\n",
    "def load_and_preprocess_datasets(model_args, data_args, training_args, tokenizer, model):\n",
    "    # Get the datasets: you can either provide your own CSV/JSON training and evaluation files (see below)\n",
    "    # or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/\n",
    "    # (the dataset will be downloaded automatically from the datasets Hub).\n",
    "    #\n",
    "    # For CSV/JSON files this script will use the first column for the full texts and the second column for the\n",
    "    # keyphrases (unless you specify column names for this with the `src_column` and `tgt_column` arguments).\n",
    "    #\n",
    "    # In distributed training, the load_dataset function guarantee that only one local process can concurrently\n",
    "    # download the dataset.\n",
    "    \n",
    "    prefix = data_args.source_prefix if data_args.source_prefix is not None else \"\"\n",
    "\n",
    "    if data_args.dataset_name is not None:\n",
    "        # Downloading and loading a dataset from the hub.\n",
    "        raw_datasets = load_dataset(\n",
    "            data_args.dataset_name, data_args.dataset_config_name, cache_dir=model_args.cache_dir\n",
    "        )\n",
    "    else:\n",
    "        data_files = {}\n",
    "        if data_args.train_file is not None:\n",
    "            data_files[\"train\"] = data_args.train_file\n",
    "            extension = data_args.train_file.split(\".\")[-1]\n",
    "        if data_args.validation_file is not None:\n",
    "            data_files[\"validation\"] = data_args.validation_file\n",
    "            extension = data_args.validation_file.split(\".\")[-1]\n",
    "        if data_args.test_file is not None:\n",
    "            data_files[\"test\"] = data_args.test_file\n",
    "            extension = data_args.test_file.split(\".\")[-1]\n",
    "        raw_datasets = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir)\n",
    "\n",
    "    # Preprocessing the datasets.\n",
    "    # We need to tokenize inputs and targets.\n",
    "    if training_args.do_train:\n",
    "        column_names = raw_datasets[\"train\"].column_names\n",
    "    elif training_args.do_eval:\n",
    "        column_names = raw_datasets[\"validation\"].column_names\n",
    "    elif training_args.do_predict:\n",
    "        column_names = raw_datasets[\"test\"].column_names\n",
    "    else:\n",
    "        logger.info(\"There is nothing to do. Please pass `do_train`, `do_eval` and/or `do_predict`.\")\n",
    "        return\n",
    "\n",
    "    # Get the column names for input/target.\n",
    "    dataset_columns = kpgen_name_mapping.get(data_args.dataset_name, None)\n",
    "    if data_args.src_column is None:\n",
    "        src_column = dataset_columns[0] if dataset_columns is not None else column_names[0]\n",
    "    else:\n",
    "        src_column = data_args.src_column\n",
    "        if src_column not in column_names:\n",
    "            raise ValueError(\n",
    "                f\"--src_column' value '{data_args.src_column}' needs to be one of: {', '.join(column_names)}\"\n",
    "            )\n",
    "    if data_args.tgt_column is None:\n",
    "        tgt_column = dataset_columns[1] if dataset_columns is not None else column_names[1]\n",
    "    else:\n",
    "        tgt_column = data_args.tgt_column\n",
    "        if tgt_column not in column_names:\n",
    "            raise ValueError(\n",
    "                f\"--tgt_column' value '{data_args.tgt_column}' needs to be one of: {', '.join(column_names)}\"\n",
    "            )\n",
    "\n",
    "    # Temporarily set max_target_length for training.\n",
    "    max_target_length = data_args.max_target_length\n",
    "    padding = \"max_length\" if data_args.pad_to_max_length else False\n",
    "\n",
    "    if training_args.label_smoothing_factor > 0 and not hasattr(model, \"prepare_decoder_input_ids_from_labels\"):\n",
    "        logger.warning(\n",
    "            \"label_smoothing is enabled but the `prepare_decoder_input_ids_from_labels` method is not defined for\"\n",
    "            f\"`{model.__class__.__name__}`. This will lead to loss being calculated twice and will take up more memory\"\n",
    "        )\n",
    "\n",
    "    def preprocess_function(examples):\n",
    "        # remove pairs where at least one record is None\n",
    "        inputs, targets = [], []\n",
    "        for i in range(len(examples[src_column])):\n",
    "            if examples[src_column][i] is not None and examples[tgt_column][i] is not None:\n",
    "                inputs.append(examples[src_column][i])\n",
    "                targets.append(examples[tgt_column][i])\n",
    "\n",
    "        inputs = [prefix + inp for inp in inputs]\n",
    "        model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding=padding, truncation=True)\n",
    "\n",
    "        # Setup the tokenizer for targets\n",
    "        with tokenizer.as_target_tokenizer():\n",
    "            labels = tokenizer(targets, max_length=max_target_length, padding=padding, truncation=True)\n",
    "\n",
    "        # If we are padding here, replace all tokenizer.pad_token_id in the labels by -100 when we want to ignore\n",
    "        # padding in the loss.\n",
    "        if padding == \"max_length\" and data_args.ignore_pad_token_for_loss:\n",
    "            labels[\"input_ids\"] = [\n",
    "                [(l if l != tokenizer.pad_token_id else -100) for l in label] for label in labels[\"input_ids\"]\n",
    "            ]\n",
    "\n",
    "        model_inputs[\"labels\"] = labels[\"input_ids\"]\n",
    "        return model_inputs\n",
    "\n",
    "    train_dataset, eval_dataset, predict_dataset = None, None, None\n",
    "    if training_args.do_train:\n",
    "        if \"train\" not in raw_datasets:\n",
    "            raise ValueError(\"--do_train requires a train dataset\")\n",
    "        train_dataset = raw_datasets[\"train\"]\n",
    "        if data_args.max_train_samples is not None:\n",
    "            # train_dataset = train_dataset.select(range(data_args.max_train_samples))\n",
    "            rand_data_idx = random.sample(list(range(len(train_dataset))), data_args.max_train_samples)\n",
    "            train_dataset = train_dataset.select(rand_data_idx)\n",
    "        with training_args.main_process_first(desc=\"train dataset map pre-processing\"):\n",
    "            train_dataset = train_dataset.map(\n",
    "                preprocess_function,\n",
    "                batched=True,\n",
    "                num_proc=data_args.preprocessing_num_workers,\n",
    "                remove_columns=column_names,\n",
    "                load_from_cache_file=not data_args.overwrite_cache,\n",
    "                desc=\"Running tokenizer on train dataset\",\n",
    "            )\n",
    "\n",
    "    if training_args.do_eval:\n",
    "        max_target_length = data_args.val_max_target_length\n",
    "        if \"validation\" not in raw_datasets:\n",
    "            raise ValueError(\"--do_eval requires a validation dataset\")\n",
    "        eval_dataset = raw_datasets[\"validation\"]\n",
    "        if data_args.max_eval_samples is not None:\n",
    "            eval_dataset = eval_dataset.select(range(data_args.max_eval_samples))\n",
    "        with training_args.main_process_first(desc=\"validation dataset map pre-processing\"):\n",
    "            eval_dataset = eval_dataset.map(\n",
    "                preprocess_function,\n",
    "                batched=True,\n",
    "                num_proc=data_args.preprocessing_num_workers,\n",
    "                remove_columns=column_names,\n",
    "                load_from_cache_file=not data_args.overwrite_cache,\n",
    "                desc=\"Running tokenizer on validation dataset\",\n",
    "            )\n",
    "\n",
    "    if training_args.do_predict:\n",
    "        max_target_length = data_args.val_max_target_length\n",
    "        if \"test\" not in raw_datasets:\n",
    "            raise ValueError(\"--do_predict requires a test dataset\")\n",
    "        predict_dataset = raw_datasets[\"test\"]\n",
    "        if data_args.max_predict_samples is not None:\n",
    "            predict_dataset = predict_dataset.select(range(data_args.max_predict_samples))\n",
    "        with training_args.main_process_first(desc=\"prediction dataset map pre-processing\"):\n",
    "            predict_dataset = predict_dataset.map(\n",
    "                preprocess_function,\n",
    "                batched=True,\n",
    "                num_proc=data_args.preprocessing_num_workers,\n",
    "                remove_columns=column_names,\n",
    "                load_from_cache_file=not data_args.overwrite_cache,\n",
    "                desc=\"Running tokenizer on prediction dataset\",\n",
    "            )\n",
    "\n",
    "    return train_dataset, eval_dataset, predict_dataset\n",
    "\n",
    "\n",
    "def main():\n",
    "    # See all possible arguments in src/transformers/training_args.py\n",
    "    # or by passing the --help flag to this script.\n",
    "    # We now keep distinct sets of args, for a cleaner separation of concerns.\n",
    "\n",
    "    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, Seq2SeqTrainingArguments))\n",
    "    if len(sys.argv) == 2 and sys.argv[1].endswith(\".json\"):\n",
    "        # If we pass only one argument to the script and it's the path to a json file,\n",
    "        # let's parse it to get our arguments.\n",
    "        model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n",
    "    else:\n",
    "        model_args, data_args, training_args = parser.parse_args_into_dataclasses()\n",
    "\n",
    "    # Setup logging\n",
    "    logging.basicConfig(\n",
    "        format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n",
    "        datefmt=\"%m/%d/%Y %H:%M:%S\",\n",
    "        handlers=[logging.StreamHandler(sys.stdout)],\n",
    "    )\n",
    "    # log to both file and stderr\n",
    "    fileHandler = logging.FileHandler(\"{}/train.log\".format(training_args.output_dir))\n",
    "    logger.addHandler(fileHandler)\n",
    "    log_level = training_args.get_process_log_level()\n",
    "    logger.setLevel(log_level)\n",
    "    datasets.utils.logging.set_verbosity(log_level)\n",
    "    transformers.utils.logging.set_verbosity(log_level)\n",
    "    transformers.utils.logging.enable_default_handler()\n",
    "    transformers.utils.logging.enable_explicit_format()\n",
    "\n",
    "    # Log on each process the small summary:\n",
    "    logger.warning(\n",
    "        f\"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}\"\n",
    "        + f\"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}\"\n",
    "    )\n",
    "    logger.info(f\"Training/evaluation parameters {training_args}\")\n",
    "\n",
    "    if data_args.source_prefix is None and model_args.model_name_or_path in [\n",
    "        \"t5-small\",\n",
    "        \"t5-base\",\n",
    "        \"t5-large\",\n",
    "        \"t5-3b\",\n",
    "        \"t5-11b\",\n",
    "    ]:\n",
    "        logger.warning(\n",
    "            \"You're running a t5 model but didn't provide a source prefix, which is the expected, e.g. with \"\n",
    "            \"`--source_prefix 'summarize: ' `\"\n",
    "        )\n",
    "\n",
    "    # Detecting last checkpoint.\n",
    "    last_checkpoint = None\n",
    "    if os.path.isdir(training_args.output_dir) and training_args.do_train and not training_args.overwrite_output_dir:\n",
    "        last_checkpoint = get_last_checkpoint(training_args.output_dir)\n",
    "        if last_checkpoint is None and len(os.listdir(training_args.output_dir)) > 0:\n",
    "            raise ValueError(\n",
    "                f\"Output directory ({training_args.output_dir}) already exists and is not empty. \"\n",
    "                \"Use --overwrite_output_dir to overcome.\"\n",
    "            )\n",
    "        elif last_checkpoint is not None and training_args.resume_from_checkpoint is None:\n",
    "            logger.info(\n",
    "                f\"Checkpoint detected, resuming training at {last_checkpoint}. To avoid this behavior, change \"\n",
    "                \"the `--output_dir` or add `--overwrite_output_dir` to train from scratch.\"\n",
    "            )\n",
    "\n",
    "    # Set seed before initializing model.\n",
    "    set_seed(training_args.seed)\n",
    "\n",
    "    # Load pretrained model and tokenizer\n",
    "    #\n",
    "    # Distributed training:\n",
    "    # The .from_pretrained methods guarantee that only one local process can concurrently\n",
    "    # download model & vocab.\n",
    "    config = AutoConfig.from_pretrained(\n",
    "        model_args.config_name if model_args.config_name else model_args.model_name_or_path,\n",
    "        cache_dir=model_args.cache_dir,\n",
    "        revision=model_args.model_revision,\n",
    "        use_auth_token=True if model_args.use_auth_token else None,\n",
    "    )\n",
    "    tokenizer = AutoTokenizer.from_pretrained(\n",
    "        model_args.tokenizer_name if model_args.tokenizer_name else model_args.model_name_or_path,\n",
    "        cache_dir=model_args.cache_dir,\n",
    "        use_fast=model_args.use_fast_tokenizer,\n",
    "        revision=model_args.model_revision,\n",
    "        use_auth_token=True if model_args.use_auth_token else None,\n",
    "    )\n",
    "    model = AutoModelForSeq2SeqLM.from_pretrained(\n",
    "        model_args.model_name_or_path,\n",
    "        from_tf=bool(\".ckpt\" in model_args.model_name_or_path),\n",
    "        config=config,\n",
    "        cache_dir=model_args.cache_dir,\n",
    "        revision=model_args.model_revision,\n",
    "        use_auth_token=True if model_args.use_auth_token else None,\n",
    "    )\n",
    "\n",
    "    if 't5' not in model_args.model_name_or_path:\n",
    "        model.resize_token_embeddings(len(tokenizer))\n",
    "\n",
    "    if model.config.decoder_start_token_id is None:\n",
    "        raise ValueError(\"Make sure that `config.decoder_start_token_id` is correctly defined\")\n",
    "\n",
    "    if (\n",
    "        hasattr(model.config, \"max_position_embeddings\")\n",
    "        and model.config.max_position_embeddings < data_args.max_source_length\n",
    "    ):\n",
    "        if model_args.resize_position_embeddings is None:\n",
    "            logger.warning(\n",
    "                f\"Increasing the model's number of position embedding vectors from {model.config.max_position_embeddings} \"\n",
    "                f\"to {data_args.max_source_length}.\"\n",
    "            )\n",
    "            model.resize_position_embeddings(data_args.max_source_length)\n",
    "        elif model_args.resize_position_embeddings:\n",
    "            model.resize_position_embeddings(data_args.max_source_length)\n",
    "        else:\n",
    "            raise ValueError(\n",
    "                f\"`--max_source_length` is set to {data_args.max_source_length}, but the model only has {model.config.max_position_embeddings}\"\n",
    "                f\" position encodings. Consider either reducing `--max_source_length` to {model.config.max_position_embeddings} or to automatically \"\n",
    "                \"resize the model's position encodings by passing `--resize_position_embeddings`.\"\n",
    "            )\n",
    "\n",
    "    # load and preprocess the datasets\n",
    "    train_dataset, eval_dataset, predict_dataset = load_and_preprocess_datasets(model_args, data_args, training_args, tokenizer, model)\n",
    "\n",
    "    # Data collator\n",
    "    label_pad_token_id = tokenizer.pad_token_id\n",
    "    data_collator = DataCollatorForSeq2Seq(\n",
    "        tokenizer,\n",
    "        model=model,\n",
    "        label_pad_token_id=label_pad_token_id,\n",
    "        pad_to_multiple_of=8 if training_args.fp16 else None,\n",
    "    )\n",
    "\n",
    "    # Metric\n",
    "    # metric = load_metric(\"rouge\")\n",
    "    def postprocess_text_kpgen(preds, labels):\n",
    "        preds = [[x.strip() for x in pred.strip().split(';')] for pred in preds]\n",
    "        labels = [[x.strip() for x in label.strip().split(';')] for label in labels]\n",
    "        return preds, labels\n",
    "\n",
    "    def compute_metrics(eval_preds):\n",
    "        preds, labels = eval_preds\n",
    "        if isinstance(preds, tuple):\n",
    "            preds = preds[0]\n",
    "        preds= np.where(preds != -100, preds, tokenizer.pad_token_id)\n",
    "        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n",
    "        # if data_args.ignore_pad_token_for_loss:\n",
    "        #     # Replace -100 in the labels as we can't decode them.\n",
    "        labels = np.where(labels != -100, labels, tokenizer.pad_token_id)\n",
    "        decoded_labels = tokenizer.batch_decode(preds, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n",
    "\n",
    "        decoded_preds, decoded_labels = postprocess_text_kpgen(decoded_preds, decoded_labels)\n",
    "\n",
    "        # batch-wise f1\n",
    "        kp2scores = {}\n",
    "        for cur_label in set([l for case in decoded_labels for l in case]):\n",
    "            kp2scores[cur_label] = {\"tp\": 0, \"fp\": 0, \"fn\": 0, \"label_count\": 0, \"pred_count\": 0, \"precision\": 0, \"recall\": 0, \"f1\": 0}\n",
    "        for cur_labels, cur_preds in zip(decoded_labels, decoded_preds):\n",
    "            cur_preds = set(cur_preds)\n",
    "            cur_labels = set(cur_labels)\n",
    "            for cur_label in cur_labels:\n",
    "                kp2scores[cur_label][\"label_count\"] += 1\n",
    "                if cur_label in cur_preds:\n",
    "                    kp2scores[cur_label][\"tp\"] += 1\n",
    "                else:\n",
    "                    kp2scores[cur_label][\"fn\"] += 1\n",
    "            for cur_pred in cur_preds:\n",
    "                if cur_pred in kp2scores:\n",
    "                    kp2scores[cur_pred][\"pred_count\"] += 1\n",
    "                    if cur_pred not in cur_labels:\n",
    "                        kp2scores[cur_pred][\"fp\"] += 1\n",
    "        for cur_label in kp2scores.keys():\n",
    "            kp2scores[cur_label]['precision'] = (kp2scores[cur_label][\"tp\"] / kp2scores[cur_label][\"pred_count\"]) if kp2scores[cur_label][\"pred_count\"] != 0 else 0\n",
    "            kp2scores[cur_label]['recall'] = (kp2scores[cur_label][\"tp\"] / kp2scores[cur_label][\"label_count\"]) if kp2scores[cur_label][\"pred_count\"] != 0 else 0 \n",
    "            kp2scores[cur_label]['f1'] = ((kp2scores[cur_label]['precision'] + kp2scores[cur_label]['recall']) / 2 * kp2scores[cur_label]['recall'] * kp2scores[cur_label]['precision']) if kp2scores[cur_label]['recall'] * kp2scores[cur_label]['precision'] != 0 else 0\n",
    "\n",
    "        result = {'f1': np.mean([x['f1'] for x in kp2scores.values()])}\n",
    "        return result\n",
    "\n",
    "    # Initialize our Trainer\n",
    "    trainer = Seq2SeqTrainer(\n",
    "        model=model,\n",
    "        args=training_args,\n",
    "        train_dataset=train_dataset if training_args.do_train else None,\n",
    "        eval_dataset=eval_dataset if training_args.do_eval else None,\n",
    "        tokenizer=tokenizer,\n",
    "        data_collator=data_collator,\n",
    "        compute_metrics=compute_metrics if training_args.predict_with_generate else None,\n",
    "        callbacks=[TensorBoardCallback()],\n",
    "    )\n",
    "\n",
    "    # Training\n",
    "    if training_args.do_train:\n",
    "        checkpoint = None\n",
    "        if training_args.resume_from_checkpoint is not None:\n",
    "            checkpoint = training_args.resume_from_checkpoint\n",
    "        elif last_checkpoint is not None:\n",
    "            checkpoint = last_checkpoint\n",
    "        train_result = trainer.train(resume_from_checkpoint=checkpoint)\n",
    "        trainer.save_model()  # Saves the tokenizer too for easy upload\n",
    "\n",
    "        metrics = train_result.metrics\n",
    "        max_train_samples = (\n",
    "            data_args.max_train_samples if data_args.max_train_samples is not None else len(train_dataset)\n",
    "        )\n",
    "        metrics[\"train_samples\"] = min(max_train_samples, len(train_dataset))\n",
    "\n",
    "        trainer.log_metrics(\"train\", metrics)\n",
    "        trainer.save_metrics(\"train\", metrics)\n",
    "        trainer.save_state()\n",
    "\n",
    "    # Evaluation\n",
    "    results = {}\n",
    "    max_length = (\n",
    "        training_args.generation_max_length\n",
    "        if training_args.generation_max_length is not None\n",
    "        else data_args.val_max_target_length\n",
    "    )\n",
    "    num_beams = data_args.num_beams if data_args.num_beams is not None else training_args.generation_num_beams\n",
    "    if training_args.do_eval:\n",
    "        logger.info(\"*** Evaluate ***\")\n",
    "        metrics = trainer.evaluate(max_length=max_length, num_beams=num_beams, metric_key_prefix=\"eval\")\n",
    "        max_eval_samples = data_args.max_eval_samples if data_args.max_eval_samples is not None else len(eval_dataset)\n",
    "        metrics[\"eval_samples\"] = min(max_eval_samples, len(eval_dataset))\n",
    "\n",
    "        trainer.log_metrics(\"eval\", metrics)\n",
    "        trainer.save_metrics(\"eval\", metrics)\n",
    "\n",
    "    \"\"\"\n",
    "    if training_args.do_predict:\n",
    "        logger.info(\"*** Predict ***\")\n",
    "\n",
    "        predict_results = trainer.predict(\n",
    "            predict_dataset, metric_key_prefix=\"predict\", max_length=max_length, num_beams=num_beams\n",
    "        )\n",
    "        metrics = predict_results.metrics\n",
    "        max_predict_samples = (\n",
    "            data_args.max_predict_samples if data_args.max_predict_samples is not None else len(predict_dataset)\n",
    "        )\n",
    "        metrics[\"predict_samples\"] = min(max_predict_samples, len(predict_dataset))\n",
    "\n",
    "        trainer.log_metrics(\"predict\", metrics)\n",
    "        trainer.save_metrics(\"predict\", metrics)\n",
    "\n",
    "        if trainer.is_world_process_zero():\n",
    "            if training_args.predict_with_generate:\n",
    "                predictions = tokenizer.batch_decode(\n",
    "                    predict_results.predictions, skip_special_tokens=True, clean_up_tokenization_spaces=True\n",
    "                )\n",
    "                predictions = [pred.strip() for pred in predictions]\n",
    "                output_prediction_file = os.path.join(training_args.output_dir, \"generated_predictions.txt\")\n",
    "                with open(output_prediction_file, \"w\") as writer:\n",
    "                    writer.write(\"\\n\".join(predictions))\n",
    "\n",
    "    kwargs = {\"finetuned_from\": model_args.model_name_or_path, \"tasks\": \"summarization\"}\n",
    "    if data_args.dataset_name is not None:\n",
    "        kwargs[\"dataset_tags\"] = data_args.dataset_name\n",
    "        if data_args.dataset_config_name is not None:\n",
    "            kwargs[\"dataset_args\"] = data_args.dataset_config_name\n",
    "            kwargs[\"dataset\"] = f\"{data_args.dataset_name} {data_args.dataset_config_name}\"\n",
    "        else:\n",
    "            kwargs[\"dataset\"] = data_args.dataset_name\n",
    "\n",
    "    if training_args.push_to_hub:\n",
    "        trainer.push_to_hub(**kwargs)\n",
    "    else:\n",
    "        trainer.create_model_card(**kwargs)\n",
    "    \"\"\"\n",
    "\n",
    "    return results\n",
    "\n",
    "\n",
    "def _mp_fn(index):\n",
    "    # For xla_spawn (TPUs)\n",
    "    main()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d53082da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:44:38.843489Z",
     "iopub.status.busy": "2025-02-11T06:44:38.843259Z",
     "iopub.status.idle": "2025-02-11T06:44:38.850579Z",
     "shell.execute_reply": "2025-02-11T06:44:38.849928Z"
    },
    "papermill": {
     "duration": 0.014263,
     "end_time": "2025-02-11T06:44:38.851839",
     "exception": false,
     "start_time": "2025-02-11T06:44:38.837576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting /kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile /kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\n",
    "#!/usr/bin/env python\n",
    "# coding=utf-8\n",
    "# based on https://github.com/huggingface/transformers/blob/v4.16.2/examples/pytorch/summarization/run_summarization_no_trainer.py\n",
    "\"\"\"\n",
    "Decoding a 🤗 Transformers model on keyphrase generation.\n",
    "\"\"\"\n",
    "\n",
    "import argparse\n",
    "import logging\n",
    "import math\n",
    "import json\n",
    "import os\n",
    "import sys\n",
    "import random\n",
    "from pathlib import Path\n",
    "\n",
    "import datasets\n",
    "import nltk\n",
    "import numpy as np\n",
    "import torch\n",
    "from datasets import load_dataset\n",
    "from evaluate import load as load_metric\n",
    "from torch.utils.data import DataLoader\n",
    "from tqdm.auto import tqdm\n",
    "\n",
    "import transformers\n",
    "from accelerate import Accelerator\n",
    "from filelock import FileLock\n",
    "from huggingface_hub import Repository\n",
    "from transformers import (\n",
    "    CONFIG_MAPPING,\n",
    "    MODEL_MAPPING,\n",
    "    AdamW,\n",
    "    AutoConfig,\n",
    "    AutoModelForSeq2SeqLM,\n",
    "    AutoTokenizer,\n",
    "    DataCollatorForSeq2Seq,\n",
    "    SchedulerType,\n",
    "    get_scheduler,\n",
    "    set_seed,\n",
    ")\n",
    "from transformers.file_utils import get_full_repo_name, is_offline_mode\n",
    "from transformers.utils.versions import require_version\n",
    "\n",
    "\n",
    "logger = logging.getLogger(__name__)\n",
    "consoleHandler = logging.StreamHandler()\n",
    "logger.addHandler(consoleHandler)\n",
    "\n",
    "require_version(\"datasets>=1.8.0\", \"To fix: pip install -r examples/pytorch/summarization/requirements.txt\")\n",
    "\n",
    "# You should update this to your particular problem to have better documentation of `model_type`\n",
    "MODEL_CONFIG_CLASSES = list(MODEL_MAPPING.keys())\n",
    "MODEL_TYPES = tuple(conf.model_type for conf in MODEL_CONFIG_CLASSES)\n",
    "\n",
    "try:\n",
    "    nltk.data.find(\"tokenizers/punkt\")\n",
    "except (LookupError, OSError):\n",
    "    if is_offline_mode():\n",
    "        raise LookupError(\n",
    "            \"Offline mode: run this script without TRANSFORMERS_OFFLINE first to download nltk data files\"\n",
    "        )\n",
    "    with FileLock(\".lock\") as lock:\n",
    "        nltk.download(\"punkt\", quiet=True)\n",
    "\n",
    "\n",
    "kpgen_name_mapping = {\n",
    "    \"kp20k\": (\"src\", \"tgt\"),\n",
    "}\n",
    "\n",
    "\n",
    "def postprocess_text_kpgen(preds, labels, predsonly=False):\n",
    "    preds = [[x.strip() for x in pred.strip().split(';')] for pred in preds]\n",
    "    if not predsonly:\n",
    "        labels = [[x.strip() for x in label.strip().split(';')] for label in labels]\n",
    "    return preds, labels\n",
    "\n",
    "\n",
    "def parse_args():\n",
    "    parser = argparse.ArgumentParser(description=\"Finetune a transformers model on keyphrase generation\")\n",
    "    parser.add_argument(\n",
    "        \"--dataset_name\",\n",
    "        type=str,\n",
    "        default=None,\n",
    "        help=\"The name of the dataset to use (via the datasets library).\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--dataset_config_name\",\n",
    "        type=str,\n",
    "        default=None,\n",
    "        help=\"The configuration name of the dataset to use (via the datasets library).\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--test_file\", type=str, default=None, help=\"A csv or a json file containing the test data.\"\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--ignore_pad_token_for_loss\",\n",
    "        type=bool,\n",
    "        default=True,\n",
    "        help=\"Whether to ignore the tokens corresponding to \" \"padded labels in the loss computation or not.\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--max_source_length\",\n",
    "        type=int,\n",
    "        default=1024,\n",
    "        help=\"The maximum total input sequence length after \"\n",
    "        \"tokenization.Sequences longer than this will be truncated, sequences shorter will be padded.\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--source_prefix\",\n",
    "        type=str,\n",
    "        default=None,\n",
    "        help=\"A prefix to add before every source text \" \"(useful for T5 models).\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--preprocessing_num_workers\",\n",
    "        type=int,\n",
    "        default=None,\n",
    "        help=\"The number of processes to use for the preprocessing.\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--overwrite_cache\", type=bool, default=None, help=\"Overwrite the cached training and evaluation sets\"\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--max_target_length\",\n",
    "        type=int,\n",
    "        default=128,\n",
    "        help=\"The maximum total sequence length for target text after \"\n",
    "        \"tokenization. Sequences longer than this will be truncated, sequences shorter will be padded.\"\n",
    "        \"during ``evaluate`` and ``predict``.\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--val_max_target_length\",\n",
    "        type=int,\n",
    "        default=None,\n",
    "        help=\"The maximum total sequence length for validation \"\n",
    "        \"target text after tokenization.Sequences longer than this will be truncated, sequences shorter will be \"\n",
    "        \"padded. Will default to `max_target_length`.This argument is also used to override the ``max_length`` \"\n",
    "        \"param of ``model.generate``, which is used during ``evaluate`` and ``predict``.\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--max_length\",\n",
    "        type=int,\n",
    "        default=128,\n",
    "        help=(\n",
    "            \"The maximum total input sequence length after tokenization. Sequences longer than this will be truncated,\"\n",
    "            \" sequences shorter will be padded if `--pad_to_max_lengh` is passed.\"\n",
    "        ),\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--num_beams\",\n",
    "        type=int,\n",
    "        default=1,\n",
    "        help=\"Number of beams to use for evaluation. This argument will be \"\n",
    "        \"passed to ``model.generate``, which is used during ``evaluate`` and ``predict``.\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--pad_to_max_length\",\n",
    "        action=\"store_true\",\n",
    "        help=\"If passed, pad all samples to `max_length`. Otherwise, dynamic padding is used.\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--model_name_or_path\",\n",
    "        type=str,\n",
    "        help=\"Path to pretrained model or model identifier from huggingface.co/models.\",\n",
    "        required=True,\n",
    "    )\n",
    "    # parser.add_argument(\n",
    "    #     \"--config_name\",\n",
    "    #     type=str,\n",
    "    #     default=None,\n",
    "    #     help=\"Pretrained config name or path if not the same as model_name\",\n",
    "    # )\n",
    "    parser.add_argument(\n",
    "        \"--tokenizer_name\",\n",
    "        type=str,\n",
    "        default=None,\n",
    "        help=\"Pretrained tokenizer name or path if not the same as model_name\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--src_column\",\n",
    "        type=str,\n",
    "        default=None,\n",
    "        help=\"The name of the column in the datasets containing the source texts (for keyphrase generation).\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--tgt_column\",\n",
    "        type=str,\n",
    "        default=None,\n",
    "        help=\"The name of the column in the datasets containing the keyphrases (for keyphrase generation).\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--use_slow_tokenizer\",\n",
    "        action=\"store_true\",\n",
    "        help=\"If passed, will use a slow tokenizer (not backed by the 🤗 Tokenizers library).\",\n",
    "    )\n",
    "    parser.add_argument(\n",
    "        \"--per_device_eval_batch_size\",\n",
    "        type=int,\n",
    "        default=8,\n",
    "        help=\"Batch size (per device) for the evaluation dataloader.\",\n",
    "    )\n",
    "    parser.add_argument(\"--output_dir\", type=str, required=True, help=\"Dir for saving eval log.\")\n",
    "    parser.add_argument(\"--output_file_name\", type=str, required=True, help=\"Output hypothesis file name.\")\n",
    "    parser.add_argument(\"--write_raw\", type=bool, default=True, help=\"Write raw text lines (True) or json with phrases splitted (False).\")\n",
    "\n",
    "    args = parser.parse_args()\n",
    "\n",
    "    # Sanity checks\n",
    "    if args.dataset_name is None and args.test_file is None:\n",
    "        raise ValueError(\"Need either a dataset name or a testing file.\")\n",
    "    else:\n",
    "        if args.test_file is not None:\n",
    "            extension = args.test_file.split(\".\")[-1]\n",
    "            assert extension in [\"csv\", \"json\"], \"`test_file` should be a csv or a json file.\"\n",
    "\n",
    "    return args\n",
    "\n",
    "\n",
    "def get_test_dataset(args, accelerator, tokenizer):\n",
    "    if args.dataset_name is not None:\n",
    "        # Downloading and loading a dataset from the hub.\n",
    "        raw_datasets = load_dataset(args.dataset_name, args.dataset_config_name)\n",
    "    else:\n",
    "        assert args.test_file is not None\n",
    "        data_files = {}\n",
    "        data_files[\"test\"] = args.test_file\n",
    "        extension = args.test_file.split(\".\")[-1]\n",
    "        raw_datasets = load_dataset(extension, data_files=data_files)\n",
    "\n",
    "    prefix = args.source_prefix if args.source_prefix is not None else \"\"\n",
    "\n",
    "    # Preprocessing the datasets.\n",
    "    # First we tokenize all the texts.\n",
    "    column_names = raw_datasets[\"test\"].column_names\n",
    "\n",
    "    # Get the column names for input/target.\n",
    "    dataset_columns = kpgen_name_mapping.get(args.dataset_name, None)\n",
    "    if args.src_column is None:\n",
    "        src_column = dataset_columns[0] if dataset_columns is not None else column_names[0]\n",
    "    else:\n",
    "        src_column = args.src_column\n",
    "        if src_column not in column_names:\n",
    "            raise ValueError(\n",
    "                f\"--src_column' value '{args.src_column}' needs to be one of: {', '.join(column_names)}\"\n",
    "            )\n",
    "    if args.tgt_column is None:\n",
    "        tgt_column = dataset_columns[1] if dataset_columns is not None else column_names[1]\n",
    "    else:\n",
    "        tgt_column = args.tgt_column\n",
    "        if tgt_column not in column_names:\n",
    "            raise ValueError(\n",
    "                f\"--tgt_column' value '{args.tgt_column}' needs to be one of: {', '.join(column_names)}\"\n",
    "            )\n",
    "\n",
    "    # Temporarily set max_target_length for training.\n",
    "    max_target_length = args.max_target_length\n",
    "    padding = \"max_length\" if args.pad_to_max_length else False\n",
    "\n",
    "    def preprocess_function(examples):\n",
    "        inputs = examples[src_column]\n",
    "        targets = examples[tgt_column]        \n",
    "        \n",
    "        inputs = [prefix + inp for inp in inputs]\n",
    "        model_inputs = tokenizer(inputs, max_length=args.max_source_length, padding=padding, truncation=True)\n",
    "\n",
    "        # Setup the tokenizer for targets\n",
    "        with tokenizer.as_target_tokenizer():\n",
    "            labels = tokenizer(targets, max_length=max_target_length, padding=padding, truncation=True)\n",
    "\n",
    "        # If we are padding here, replace all tokenizer.pad_token_id in the labels by -100 when we want to ignore\n",
    "        # padding in the loss.\n",
    "        if padding == \"max_length\" and args.ignore_pad_token_for_loss:\n",
    "            labels[\"input_ids\"] = [\n",
    "                [(l if l != tokenizer.pad_token_id else -100) for l in label] for label in labels[\"input_ids\"]\n",
    "            ]\n",
    "\n",
    "        model_inputs[\"labels\"] = labels[\"input_ids\"]\n",
    "        return model_inputs\n",
    "\n",
    "    with accelerator.main_process_first():\n",
    "        processed_datasets = raw_datasets.map(\n",
    "            preprocess_function,\n",
    "            batched=True,\n",
    "            remove_columns=column_names,\n",
    "            load_from_cache_file=not args.overwrite_cache,\n",
    "            desc=\"Running tokenizer on dataset\",\n",
    "        )\n",
    "\n",
    "    return processed_datasets[\"test\"]\n",
    "\n",
    "\n",
    "def main():\n",
    "    args = parse_args()\n",
    "\n",
    "    device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "    logger.info(\"Inference on device: \" + str(device))\n",
    "\n",
    "    # log to both file and stderr\n",
    "    fileHandler = logging.FileHandler(\"{}/test.log\".format(args.output_dir))\n",
    "    logger.addHandler(fileHandler)\n",
    "\n",
    "    if args.source_prefix is None and args.model_name_or_path in [\n",
    "        \"t5-small\",\n",
    "        \"t5-base\",\n",
    "        \"t5-large\",\n",
    "        \"t5-3b\",\n",
    "        \"t5-11b\",\n",
    "    ]:\n",
    "        logger.warning(\n",
    "            \"You're running a t5 model but didn't provide a source prefix, which is the expected, e.g. with \"\n",
    "            \"`--source_prefix 'summarize: ' `\"\n",
    "        )\n",
    "    # Initialize the accelerator. We will let the accelerator handle device placement for us in this example.\n",
    "    accelerator = Accelerator()\n",
    "    # Make one log on every process with the configuration for debugging.\n",
    "    logging.basicConfig(\n",
    "        format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n",
    "        datefmt=\"%m/%d/%Y %H:%M:%S\",\n",
    "        level=logging.INFO,\n",
    "    )\n",
    "    logger.info(accelerator.state)\n",
    "\n",
    "    # Setup logging, we only want one process per machine to log things on the screen.\n",
    "    # accelerator.is_local_main_process is only True for one process per machine.\n",
    "    logger.setLevel(logging.INFO if accelerator.is_local_main_process else logging.ERROR)\n",
    "    if accelerator.is_local_main_process:\n",
    "        datasets.utils.logging.set_verbosity_warning()\n",
    "        transformers.utils.logging.set_verbosity_info()\n",
    "    else:\n",
    "        datasets.utils.logging.set_verbosity_error()\n",
    "        transformers.utils.logging.set_verbosity_error()\n",
    "\n",
    "    # Handle the repository creation\n",
    "    if accelerator.is_main_process:\n",
    "        if args.output_dir is not None:\n",
    "            os.makedirs(args.output_dir, exist_ok=True)\n",
    "    accelerator.wait_for_everyone()\n",
    "\n",
    "    config = AutoConfig.from_pretrained(args.model_name_or_path)\n",
    "    if args.tokenizer_name:\n",
    "        tokenizer = AutoTokenizer.from_pretrained(args.tokenizer_name, use_fast=not args.use_slow_tokenizer)\n",
    "    else:\n",
    "        tokenizer = AutoTokenizer.from_pretrained(args.model_name_or_path, use_fast=not args.use_slow_tokenizer)\n",
    "    model = AutoModelForSeq2SeqLM.from_pretrained(\n",
    "            args.model_name_or_path,\n",
    "            from_tf=bool(\".ckpt\" in args.model_name_or_path),\n",
    "            config=config,\n",
    "        )\n",
    "    model = model.to(device)\n",
    "    logger.info(\"Loaded config, tokenizer, and model from \" + args.model_name_or_path)\n",
    "    logger.info(\"Tokenizer: \" + str(type(tokenizer)))\n",
    "\n",
    "    model.resize_token_embeddings(len(tokenizer))\n",
    "    if model.config.decoder_start_token_id is None:\n",
    "        raise ValueError(\"Make sure that `config.decoder_start_token_id` is correctly defined\")\n",
    "\n",
    "    # get datasets\n",
    "    test_dataset = get_test_dataset(args, accelerator, tokenizer)\n",
    "\n",
    "    # Log a few random samples from the training set:\n",
    "    for index in random.sample(range(len(test_dataset)), 1):\n",
    "        logger.info(f\"Sample {index} of the testing set: {test_dataset[index]}.\")\n",
    "\n",
    "    label_pad_token_id = tokenizer.pad_token_id\n",
    "    data_collator = DataCollatorForSeq2Seq(\n",
    "        tokenizer,\n",
    "        model=model,\n",
    "        label_pad_token_id=label_pad_token_id,\n",
    "        pad_to_multiple_of=8 if accelerator.use_fp16 else None,\n",
    "    )\n",
    "\n",
    "    eval_dataloader = DataLoader(test_dataset, collate_fn=data_collator, batch_size=args.per_device_eval_batch_size)\n",
    "\n",
    "    logger.info(\"***** Running decode *****\")\n",
    "    logger.info(f\"  Num examples = {len(test_dataset)}\")\n",
    "    logger.info(f\"  Total eval batch size = {args.per_device_eval_batch_size}\")\n",
    "\n",
    "    model.eval()\n",
    "    if args.val_max_target_length is None:\n",
    "        args.val_max_target_length = args.max_target_length\n",
    "\n",
    "    gen_kwargs = {\n",
    "        \"max_length\": args.val_max_target_length if args is not None else config.max_length,\n",
    "        \"num_beams\": args.num_beams,\n",
    "    }\n",
    "\n",
    "    valid_preds = []\n",
    "    for step, batch in tqdm(enumerate(eval_dataloader), desc='Decoding'):\n",
    "        with torch.no_grad():\n",
    "            batch = batch.to(device)\n",
    "\n",
    "            # accumulate output for f1 score calculation\n",
    "            generated_tokens = accelerator.unwrap_model(model).generate(\n",
    "                batch[\"input_ids\"],\n",
    "                attention_mask=batch[\"attention_mask\"],\n",
    "                **gen_kwargs,\n",
    "            )\n",
    "            generated_tokens = accelerator.pad_across_processes(\n",
    "                generated_tokens, dim=1, pad_index=tokenizer.pad_token_id\n",
    "            )\n",
    "\n",
    "            generated_tokens = accelerator.gather(generated_tokens).cpu().numpy()\n",
    "            if isinstance(generated_tokens, tuple):\n",
    "                generated_tokens = generated_tokens[0]\n",
    "\n",
    "            decoded_preds = tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\n",
    "            if not args.write_raw:\n",
    "                decoded_preds, _ = postprocess_text_kpgen(decoded_preds, None, predsonly=True)\n",
    "\n",
    "            valid_preds.extend(decoded_preds)\n",
    "\n",
    "    accelerator.wait_for_everyone()\n",
    "    with open(args.output_file_name, 'w') as f:\n",
    "        for pred in valid_preds:\n",
    "            if args.write_raw:\n",
    "                f.write(pred)\n",
    "            else:\n",
    "                f.write(json.dumps(pred))\n",
    "            f.write('\\n')\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1af8e36b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:44:38.862228Z",
     "iopub.status.busy": "2025-02-11T06:44:38.862024Z",
     "iopub.status.idle": "2025-02-11T06:44:42.407122Z",
     "shell.execute_reply": "2025-02-11T06:44:42.406043Z"
    },
    "papermill": {
     "duration": 3.552157,
     "end_time": "2025-02-11T06:44:42.408868",
     "exception": false,
     "start_time": "2025-02-11T06:44:38.856711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\r\n"
     ]
    }
   ],
   "source": [
    "!wandb login d336a0192867d2bfcda67821016ac99bc6a74924"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e305ec66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:44:42.420624Z",
     "iopub.status.busy": "2025-02-11T06:44:42.420381Z",
     "iopub.status.idle": "2025-02-11T06:44:42.426283Z",
     "shell.execute_reply": "2025-02-11T06:44:42.425629Z"
    },
    "papermill": {
     "duration": 0.013105,
     "end_time": "2025-02-11T06:44:42.427505",
     "exception": false,
     "start_time": "2025-02-11T06:44:42.414400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting /kaggle/working/DeepKPG/sequence_generation/seq2seq/run_t5_large.sh\n"
     ]
    }
   ],
   "source": [
    "%%writefile /kaggle/working/DeepKPG/sequence_generation/seq2seq/run_t5_large.sh\n",
    "#!/usr/bin/env bash\n",
    "\n",
    "export PYTHONIOENCODING=utf-8;\n",
    "HOME_DIR=`/kaggle/working`\n",
    "\n",
    "# Confirm GPUs, model, and dataset before training\n",
    "export CUDA_VISIBLE_DEVICES=0,1\n",
    "\n",
    "MODEL_NAME_OR_PATH=\"t5-large\"\n",
    "MODEL_NAME_SHORT=$MODEL_NAME_OR_PATH      # for creating the output dir\n",
    "\n",
    "DATASET=kp20k\n",
    "\n",
    "\n",
    "function train () {\n",
    "    BATCH_SIZE_PER_GPU=8\n",
    "    GRAD_ACCUMULATION_STEPS=4\n",
    "    N_EPOCHS=1\n",
    "    N_WARMUP_STEPS=100\n",
    "    N_EVAL_STEPS=500\n",
    "    LR=5e-5\n",
    "    LR_schedule='polynomial'    # 'linear'\n",
    "    # LR_schedule='constant'\n",
    "    SEED=1234\n",
    "    \n",
    "    OUT_DIR=${HOME_DIR}/results/${MODEL_NAME_SHORT}/$(date +'%Y%m%d-%H%M')_${DATASET}_checkpoints_${MODEL_NAME_SHORT}_lr${LR}_${LR_schedule}_seed${SEED}\n",
    "    mkdir -p ${OUT_DIR}/code_backup\n",
    "    cp *.py *.sh ${OUT_DIR}/code_backup\n",
    "\n",
    "\n",
    "    # give the argument --num_gpus=X to deepspeed if we don't use CUDA_VISIBLE_DEVICES   \n",
    "    python run_finetune_kpgen_seq2seq_hf.py \\\n",
    "        --output_dir $OUT_DIR \\\n",
    "        --model_name_or_path ${MODEL_NAME_OR_PATH} \\\n",
    "        --do_train \\\n",
    "        --do_eval \\\n",
    "        --train_file \"${DATA_DIR_PREFIX}/${DATASET}/json/train.json\" \\\n",
    "        --validation_file \"${DATA_DIR_PREFIX}/${DATASET}/json/valid.json\" \\\n",
    "        --src_column \"src\" \\\n",
    "        --tgt_column \"tgt\" \\\n",
    "\t--source_prefix \"generate keyphrases: \" \\\n",
    "        --per_device_train_batch_size ${BATCH_SIZE_PER_GPU} \\\n",
    "        --per_device_eval_batch_size ${BATCH_SIZE_PER_GPU} \\\n",
    "        --gradient_accumulation_steps ${GRAD_ACCUMULATION_STEPS} \\\n",
    "        --num_train_epochs ${N_EPOCHS} \\\n",
    "        --learning_rate ${LR} \\\n",
    "        --lr_scheduler_type ${LR_schedule} \\\n",
    "        --warmup_steps ${N_WARMUP_STEPS} \\\n",
    "        --logging_strategy 'steps' \\\n",
    "        --logging_steps 500 \\\n",
    "        --evaluation_strategy 'steps' \\\n",
    "        --eval_steps ${N_EVAL_STEPS} \\\n",
    "        --save_strategy 'steps' \\\n",
    "        --save_steps ${N_EVAL_STEPS} \\\n",
    "        --save_total_limit 1 \\\n",
    "        --load_best_model_at_end true \\\n",
    "        --overwrite_output_dir \\\n",
    "        --predict_with_generate \\\n",
    "        --seed ${SEED} \\\n",
    "        --deepspeed \"../deepspeed_configs/normal_fp16_gpuonly.json\" \\\n",
    "        --fp16 true \\\n",
    "        --half_precision_backend \"auto\"\n",
    "\n",
    "}\n",
    "\n",
    "\n",
    "function decode () {\n",
    "    EVAL_DATASET=$1\n",
    "    BATCH_SIZE_PER_GPU=32\n",
    "\n",
    "    python run_decode_kpgen_seq2seq_hf.py \\\n",
    "        --model_name_or_path $OUT_DIR \\\n",
    "        --tokenizer_name $OUT_DIR \\\n",
    "        --test_file \"${DATA_DIR_PREFIX}/${EVAL_DATASET}/json/test.json\" \\\n",
    "        --src_column \"src\" \\\n",
    "        --tgt_column \"tgt\" \\\n",
    "\t--source_prefix \"generate keyphrases: \" \\\n",
    "        --num_beams 1 \\\n",
    "        --per_device_eval_batch_size $BATCH_SIZE_PER_GPU \\\n",
    "        --output_dir $OUT_DIR \\\n",
    "        --output_file_name \"$OUT_DIR/${EVAL_DATASET}_hypotheses.txt\" \n",
    "\n",
    "}\n",
    "\n",
    "\n",
    "function evaluate () {\n",
    "    EVAL_DATASET=$1\n",
    "\n",
    "    python -W ignore ${HOME_DIR}/utils/evaluate.py \\\n",
    "        --src_dir ${DATA_DIR_PREFIX}/${EVAL_DATASET}/fairseq \\\n",
    "        --file_prefix $OUT_DIR/${EVAL_DATASET} \\\n",
    "        --tgt_dir $OUT_DIR \\\n",
    "        --log_file $EVAL_DATASET \\\n",
    "        --k_list 5 M;\n",
    "}\n",
    "\n",
    "\n",
    "if [[ $DATASET == 'kp20k' ]] ; then\n",
    "    DATA_DIR_PREFIX=\"${HOME_DIR}/data/scikp\"\n",
    "    train\n",
    "    for dataset in kp20k inspec krapivin nus semeval; do\n",
    "        decode $dataset\n",
    "        evaluate $dataset\n",
    "    done\t\n",
    "elif [[ $DATASET =~ ^(kpbiomed-small|kpbiomed-medium|kpbiomed-large)$ ]]; then\n",
    "    DATA_DIR_PREFIX=\"${HOME_DIR}/data/kpbiomed\"\n",
    "    train\n",
    "    decode $DATASET\n",
    "    evaluate $DATASET\n",
    "else\n",
    "    DATA_DIR_PREFIX=\"${HOME_DIR}/data\"\n",
    "    train\n",
    "    decode $DATASET\n",
    "    evaluate $DATASET\n",
    "fi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "09c3ab1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:44:42.438240Z",
     "iopub.status.busy": "2025-02-11T06:44:42.438036Z",
     "iopub.status.idle": "2025-02-11T06:44:42.442781Z",
     "shell.execute_reply": "2025-02-11T06:44:42.442096Z"
    },
    "papermill": {
     "duration": 0.011397,
     "end_time": "2025-02-11T06:44:42.443903",
     "exception": false,
     "start_time": "2025-02-11T06:44:42.432506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting /kaggle/working/DeepKPG/sequence_generation/seq2seq/run_bart_large.sh\n"
     ]
    }
   ],
   "source": [
    "%%writefile /kaggle/working/DeepKPG/sequence_generation/seq2seq/run_bart_large.sh\n",
    "#!/usr/bin/env bash\n",
    "\n",
    "export PYTHONIOENCODING=utf-8;\n",
    "HOME_DIR=`/kaggle/working`\n",
    "\n",
    "# Confirm GPUs, model, and dataset before training\n",
    "export CUDA_VISIBLE_DEVICES=0,1\n",
    "\n",
    "MODEL_NAME_OR_PATH=\"facebook/bart-large\"\n",
    "MODEL_NAME_SHORT=\"bart-large\"      # for creating the output dir\n",
    "\n",
    "DATASET=kp20k-original\n",
    "\n",
    "\n",
    "function train () {\n",
    "    BATCH_SIZE_PER_GPU=8\n",
    "    GRAD_ACCUMULATION_STEPS=12\n",
    "    N_EPOCHS=1\n",
    "    N_WARMUP_STEPS=100\n",
    "    N_EVAL_STEPS=500\n",
    "    LR=5e-5\n",
    "    LR_schedule='polynomial'    # 'linear'\n",
    "    # LR_schedule='constant'\n",
    "    SEED=1234\n",
    "    \n",
    "    OUT_DIR=/kaggle/working/DeepKPG/results/${MODEL_NAME_SHORT}/$(date +'%Y%m%d-%H%M')_${DATASET}_checkpoints_${MODEL_NAME_SHORT}_lr${LR}_${LR_schedule}_seed${SEED}_epoch${N_EPOCHS}\n",
    "    mkdir -p ${OUT_DIR}/code_backup\n",
    "    cp *.py *.sh ${OUT_DIR}/code_backup\n",
    "\n",
    "\n",
    "    # give the argument --num_gpus=X to deepspeed if we don't use CUDA_VISIBLE_DEVICES   \n",
    "    python sequence_generation/seq2seq/run_finetune_kpgen_seq2seq_hf.py \\\n",
    "        --output_dir $OUT_DIR \\\n",
    "        --model_name_or_path ${MODEL_NAME_OR_PATH} \\\n",
    "        --do_train \\\n",
    "        --do_eval \\\n",
    "        --train_file \"/kaggle/working/DeepKPG/data/${DATASET}/json/train.json\" \\\n",
    "        --validation_file \"/kaggle/working/DeepKPG/data/${DATASET}/json/valid.json\" \\\n",
    "        --src_column \"src\" \\\n",
    "        --tgt_column \"tgt\" \\\n",
    "        --per_device_train_batch_size ${BATCH_SIZE_PER_GPU} \\\n",
    "        --per_device_eval_batch_size ${BATCH_SIZE_PER_GPU} \\\n",
    "        --gradient_accumulation_steps ${GRAD_ACCUMULATION_STEPS} \\\n",
    "        --num_train_epochs ${N_EPOCHS} \\\n",
    "        --learning_rate ${LR} \\\n",
    "        --lr_scheduler_type ${LR_schedule} \\\n",
    "        --warmup_steps ${N_WARMUP_STEPS} \\\n",
    "        --logging_strategy 'steps' \\\n",
    "        --logging_steps 500 \\\n",
    "        --evaluation_strategy 'steps' \\\n",
    "        --eval_steps ${N_EVAL_STEPS} \\\n",
    "        --save_strategy 'steps' \\\n",
    "        --save_steps ${N_EVAL_STEPS} \\\n",
    "        --save_total_limit 1 \\\n",
    "        --load_best_model_at_end true \\\n",
    "        --overwrite_output_dir \\\n",
    "        --predict_with_generate \\\n",
    "        --seed ${SEED} \\\n",
    "        --fp16 true \\\n",
    "        --half_precision_backend \"auto\"\n",
    "\n",
    "}\n",
    "\n",
    "\n",
    "function decode () {\n",
    "    EVAL_DATASET=$1\n",
    "    BATCH_SIZE_PER_GPU=32\n",
    "\n",
    "    python sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py \\\n",
    "        --model_name_or_path $OUT_DIR \\\n",
    "        --tokenizer_name $OUT_DIR \\\n",
    "        --test_file \"data/${EVAL_DATASET}/json/test.json\" \\\n",
    "        --src_column \"src\" \\\n",
    "        --tgt_column \"tgt\" \\\n",
    "        --num_beams 1 \\\n",
    "        --per_device_eval_batch_size $BATCH_SIZE_PER_GPU \\\n",
    "        --output_dir $OUT_DIR \\\n",
    "        --output_file_name \"$OUT_DIR/${EVAL_DATASET}_hypotheses.txt\" \n",
    "\n",
    "}\n",
    "\n",
    "\n",
    "function evaluate () {\n",
    "    EVAL_DATASET=$1\n",
    "\n",
    "    python -W ignore utils/evaluate.py \\\n",
    "        --src_dir data/${EVAL_DATASET}/fairseq \\\n",
    "        --file_prefix $OUT_DIR/${EVAL_DATASET} \\\n",
    "        --tgt_dir $OUT_DIR \\\n",
    "        --log_file $EVAL_DATASET \\\n",
    "        --k_list 5 M;\n",
    "}\n",
    "\n",
    "\n",
    "# if [[ $DATASET == 'kp20k-title-bertopic-10k' ]] ; then # here\n",
    "if [[ $DATASET == 'kp20k-original' ]] ; then # here\n",
    "    DATA_DIR_PREFIX=\"/data/scikp\"\n",
    "    train\n",
    "    for dataset in kp20k-original inspec krapivin nus semeval; do\n",
    "        decode $dataset\n",
    "        evaluate $dataset\n",
    "    done\t\n",
    "elif [[ $DATASET =~ ^(kpbiomed-small|kpbiomed-medium|kpbiomed-large)$ ]]; then\n",
    "    DATA_DIR_PREFIX=\"$/data/kpbiomed\"\n",
    "    train\n",
    "    decode $DATASET\n",
    "    evaluate $DATASET\n",
    "else\n",
    "    DATA_DIR_PREFIX=\"$/data\"\n",
    "    train\n",
    "    decode $DATASET\n",
    "    evaluate $DATASET\n",
    "fi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "da3d2856",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:44:42.454405Z",
     "iopub.status.busy": "2025-02-11T06:44:42.454208Z",
     "iopub.status.idle": "2025-02-11T06:44:42.457355Z",
     "shell.execute_reply": "2025-02-11T06:44:42.456700Z"
    },
    "papermill": {
     "duration": 0.009524,
     "end_time": "2025-02-11T06:44:42.458383",
     "exception": false,
     "start_time": "2025-02-11T06:44:42.448859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'expandable_segments:True'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bc7b9cc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T06:44:42.468966Z",
     "iopub.status.busy": "2025-02-11T06:44:42.468772Z",
     "iopub.status.idle": "2025-02-11T07:03:42.123444Z",
     "shell.execute_reply": "2025-02-11T07:03:42.122327Z"
    },
    "papermill": {
     "duration": 1139.661625,
     "end_time": "2025-02-11T07:03:42.125024",
     "exception": false,
     "start_time": "2025-02-11T06:44:42.463399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working/DeepKPG\n",
      "sequence_generation/seq2seq/run_bart_large.sh: line 4: /kaggle/working: Is a directory\r\n",
      "cp: cannot stat '*.py': No such file or directory\r\n",
      "2025-02-11 06:44:53.482202: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "2025-02-11 06:44:53.681227: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "2025-02-11 06:44:53.742223: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "/usr/local/lib/python3.10/dist-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\r\n",
      "  warnings.warn(\r\n",
      "Process rank: 0, device: cuda:0, n_gpu: 1distributed training: True, 16-bits training: True\r\n",
      "config.json: 100%|█████████████████████████| 1.63k/1.63k [00:00<00:00, 11.6MB/s]\r\n",
      "tokenizer_config.json: 100%|██████████████████| 26.0/26.0 [00:00<00:00, 213kB/s]\r\n",
      "vocab.json: 100%|████████████████████████████| 899k/899k [00:00<00:00, 4.58MB/s]\r\n",
      "merges.txt: 100%|████████████████████████████| 456k/456k [00:00<00:00, 3.62MB/s]\r\n",
      "tokenizer.json: 100%|██████████████████████| 1.36M/1.36M [00:00<00:00, 7.32MB/s]\r\n",
      "pytorch_model.bin: 100%|████████████████████| 1.02G/1.02G [00:04<00:00, 235MB/s]\r\n",
      "Generating train split: 10000 examples [00:00, 140276.32 examples/s]\r\n",
      "Generating validation split: 1000 examples [00:00, 214861.12 examples/s]\r\n",
      "Running tokenizer on train dataset:   0%|      | 0/10000 [00:00<?, ? examples/s]/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:3953: UserWarning: `as_target_tokenizer` is deprecated and will be removed in v5 of Transformers. You can tokenize your labels by using the argument `text_target` of the regular `__call__` method (either in the same call as your input texts if you use the same keyword arguments, or in a separate call.\r\n",
      "  warnings.warn(\r\n",
      "Running tokenizer on train dataset: 100%|█| 10000/10000 [00:03<00:00, 2929.10 ex\r\n",
      "Running tokenizer on validation dataset: 100%|█| 1000/1000 [00:00<00:00, 3092.65\r\n",
      "/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_finetune_kpgen_seq2seq_hf.py:565: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Seq2SeqTrainer.__init__`. Use `processing_class` instead.\r\n",
      "  trainer = Seq2SeqTrainer(\r\n",
      "[2025-02-11 06:45:19,594] [INFO] [real_accelerator.py:222:get_accelerator] Setting ds_accelerator to cuda (auto detect)\r\n",
      "[WARNING|trainer_callback.py:432] 2025-02-11 06:45:21,633 >> You are adding a <class 'transformers.integrations.integration_utils.TensorBoardCallback'> to the callbacks of this Trainer, but there is already one. The currentlist of callbacks is\r\n",
      ":DefaultFlowCallback\r\n",
      "TensorBoardCallback\r\n",
      "WandbCallback\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m The `run_name` is currently set to the same value as `TrainingArguments.output_dir`. If this was not intended, please specify a different run name by setting the `TrainingArguments.run_name` parameter.\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33madityabayhaqie\u001b[0m (\u001b[33mKPResearch\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.19.1\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/DeepKPG/wandb/run-20250211_064526-v1sru2j3\u001b[0m\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33m/kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\u001b[0m\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/KPResearch/huggingface\u001b[0m\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/KPResearch/huggingface/runs/v1sru2j3\u001b[0m\r\n",
      "100%|█████████████████████████████████████████| 104/104 [13:37<00:00,  7.68s/it]/usr/local/lib/python3.10/dist-packages/transformers/modeling_utils.py:2817: UserWarning: Moving the following attributes in the config to the generation config: {'early_stopping': True, 'num_beams': 4, 'no_repeat_ngram_size': 3, 'forced_bos_token_id': 0}. You are seeing this warning because you've set generation parameters in the model config, as opposed to in the generation config.\r\n",
      "  warnings.warn(\r\n",
      "{'train_runtime': 829.7817, 'train_samples_per_second': 12.051, 'train_steps_per_second': 0.125, 'train_loss': 6.015411376953125, 'epoch': 1.0}\r\n",
      "100%|█████████████████████████████████████████| 104/104 [13:44<00:00,  7.93s/it]\r\n",
      "***** train metrics *****\r\n",
      "  epoch                    =     0.9984\r\n",
      "  total_flos               =  6927471GF\r\n",
      "  train_loss               =     6.0154\r\n",
      "  train_runtime            = 0:13:49.78\r\n",
      "  train_samples            =      10000\r\n",
      "  train_samples_per_second =     12.051\r\n",
      "  train_steps_per_second   =      0.125\r\n",
      "/usr/local/lib/python3.10/dist-packages/transformers/generation/configuration_utils.py:676: UserWarning: `num_beams` is set to 1. However, `early_stopping` is set to `True` -- this flag is only used in beam-based generation modes. You should set `num_beams>1` or unset `early_stopping`.\r\n",
      "  warnings.warn(\r\n",
      "100%|█████████████████████████████████████████| 125/125 [03:24<00:00,  1.63s/it]\r\n",
      "***** eval metrics *****\r\n",
      "  epoch                   =     0.9984\r\n",
      "  eval_f1                 =        1.0\r\n",
      "  eval_loss               =     2.3969\r\n",
      "  eval_runtime            = 0:03:25.74\r\n",
      "  eval_samples            =       1000\r\n",
      "  eval_samples_per_second =       4.86\r\n",
      "  eval_steps_per_second   =      0.608\r\n",
      "\u001b[1;34mwandb\u001b[0m: 🚀 View run \u001b[33m/kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\u001b[0m at: \u001b[34mhttps://wandb.ai/KPResearch/huggingface/runs/v1sru2j3\u001b[0m\r\n",
      "\u001b[1;34mwandb\u001b[0m: Find logs at: \u001b[1;35mwandb/run-20250211_064526-v1sru2j3/logs\u001b[0m\r\n",
      "2025-02-11 07:02:48.024402: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "2025-02-11 07:02:48.045734: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "2025-02-11 07:02:48.054594: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "Inference on device: cuda:0\r\n",
      "Distributed environment: NO\r\n",
      "Num processes: 1\r\n",
      "Process index: 0\r\n",
      "Local process index: 0\r\n",
      "Device: cuda\r\n",
      "\r\n",
      "Mixed precision type: no\r\n",
      "\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/config.json\r\n",
      "Model config BartConfig {\r\n",
      "  \"_name_or_path\": \"/kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\",\r\n",
      "  \"activation_dropout\": 0.1,\r\n",
      "  \"activation_function\": \"gelu\",\r\n",
      "  \"add_bias_logits\": false,\r\n",
      "  \"add_final_layer_norm\": false,\r\n",
      "  \"architectures\": [\r\n",
      "    \"BartForConditionalGeneration\"\r\n",
      "  ],\r\n",
      "  \"attention_dropout\": 0.1,\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"classif_dropout\": 0.1,\r\n",
      "  \"classifier_dropout\": 0.0,\r\n",
      "  \"d_model\": 1024,\r\n",
      "  \"decoder_attention_heads\": 16,\r\n",
      "  \"decoder_ffn_dim\": 4096,\r\n",
      "  \"decoder_layerdrop\": 0.0,\r\n",
      "  \"decoder_layers\": 12,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"dropout\": 0.1,\r\n",
      "  \"early_stopping\": null,\r\n",
      "  \"encoder_attention_heads\": 16,\r\n",
      "  \"encoder_ffn_dim\": 4096,\r\n",
      "  \"encoder_layerdrop\": 0.0,\r\n",
      "  \"encoder_layers\": 12,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"gradient_checkpointing\": false,\r\n",
      "  \"id2label\": {\r\n",
      "    \"0\": \"LABEL_0\",\r\n",
      "    \"1\": \"LABEL_1\",\r\n",
      "    \"2\": \"LABEL_2\"\r\n",
      "  },\r\n",
      "  \"init_std\": 0.02,\r\n",
      "  \"is_encoder_decoder\": true,\r\n",
      "  \"label2id\": {\r\n",
      "    \"LABEL_0\": 0,\r\n",
      "    \"LABEL_1\": 1,\r\n",
      "    \"LABEL_2\": 2\r\n",
      "  },\r\n",
      "  \"max_position_embeddings\": 1024,\r\n",
      "  \"model_type\": \"bart\",\r\n",
      "  \"no_repeat_ngram_size\": null,\r\n",
      "  \"normalize_before\": false,\r\n",
      "  \"num_beams\": null,\r\n",
      "  \"num_hidden_layers\": 12,\r\n",
      "  \"pad_token_id\": 1,\r\n",
      "  \"scale_embedding\": false,\r\n",
      "  \"task_specific_params\": {\r\n",
      "    \"summarization\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 128,\r\n",
      "      \"min_length\": 12,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_cnn\": {\r\n",
      "      \"length_penalty\": 2.0,\r\n",
      "      \"max_length\": 142,\r\n",
      "      \"min_length\": 56,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_xsum\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 62,\r\n",
      "      \"min_length\": 11,\r\n",
      "      \"num_beams\": 6\r\n",
      "    }\r\n",
      "  },\r\n",
      "  \"torch_dtype\": \"float32\",\r\n",
      "  \"transformers_version\": \"4.47.0\",\r\n",
      "  \"use_cache\": true,\r\n",
      "  \"vocab_size\": 50265\r\n",
      "}\r\n",
      "\r\n",
      "loading file vocab.json\r\n",
      "loading file merges.txt\r\n",
      "loading file tokenizer.json\r\n",
      "loading file added_tokens.json\r\n",
      "loading file special_tokens_map.json\r\n",
      "loading file tokenizer_config.json\r\n",
      "loading file chat_template.jinja\r\n",
      "loading weights file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/model.safetensors\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "All model checkpoint weights were used when initializing BartForConditionalGeneration.\r\n",
      "\r\n",
      "All the weights of BartForConditionalGeneration were initialized from the model checkpoint at /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1.\r\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use BartForConditionalGeneration for predictions without further training.\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/generation_config.json\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"early_stopping\": true,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_bos_token_id\": 0,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"no_repeat_ngram_size\": 3,\r\n",
      "  \"num_beams\": 4,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "Loaded config, tokenizer, and model from /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\r\n",
      "Tokenizer: <class 'transformers.models.bart.tokenization_bart_fast.BartTokenizerFast'>\r\n",
      "You are resizing the embedding layer without providing a `pad_to_multiple_of` parameter. This means that the new embedding dimension will be 50265. This might induce some performance reduction as *Tensor Cores* will not be available. For more details about this, or help on choosing the correct value for resizing, refer to this guide: https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc\r\n",
      "Generating test split: 1000 examples [00:00, 116702.95 examples/s]\r\n",
      "Running tokenizer on dataset:   0%|             | 0/1000 [00:00<?, ? examples/s]/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:3953: UserWarning: `as_target_tokenizer` is deprecated and will be removed in v5 of Transformers. You can tokenize your labels by using the argument `text_target` of the regular `__call__` method (either in the same call as your input texts if you use the same keyword arguments, or in a separate call.\r\n",
      "  warnings.warn(\r\n",
      "Running tokenizer on dataset: 100%|█| 1000/1000 [00:00<00:00, 2922.28 examples/s\r\n",
      "Sample 227 of the testing set: {'input_ids': [0, 49208, 3923, 36010, 13315, 4050, 11, 37323, 25099, 20643, 646, 1090, 642, 742, 25, 41, 3150, 739, 346, 9, 37323, 25099, 20643, 555, 577, 15, 5, 46195, 3748, 8, 5, 24173, 11, 5, 25099, 20643, 555, 55, 6336, 6, 2609, 5, 1303, 9, 9126, 3374, 41, 2778, 543, 3685, 190, 13, 2320, 4, 2210, 25099, 4383, 709, 11534, 694, 103, 1804, 323, 6, 11, 14949, 19, 10, 1219, 254, 6, 13, 2207, 9126, 11, 37323, 25099, 20643, 4, 3700, 6, 209, 32, 9393, 7, 5, 9198, 12673, 9, 6, 13, 1246, 6, 36010, 13315, 14198, 4, 959, 6, 5, 9726, 8, 3547, 9, 5, 13673, 16, 45, 2800, 23, 70, 4, 13, 1246, 6, 117, 8257, 16, 576, 25, 7, 596, 5, 5849, 11493, 36, 364, 4, 821, 482, 30, 21555, 154, 5, 9749, 6064, 6, 50, 18884, 118, 6806, 11, 5, 25099, 4383, 2149, 13, 5, 6064, 4839, 50, 141, 45371, 227, 4050, 1303, 5, 5849, 7, 43384, 36, 939, 4, 242, 482, 30, 41444, 9749, 31, 16934, 36010, 13315, 4050, 4839, 479, 11, 5, 320, 403, 6, 335, 31, 5, 11587, 1536, 9, 10, 8194, 14578, 2103, 8624, 1219, 254, 64, 28, 27380, 8, 2633, 7, 5, 3018, 36, 4049, 2233, 1548, 4839, 25606, 150, 11, 5, 5442, 403, 6, 5, 1219, 254, 64, 28, 341, 25, 41, 50, 24618, 13, 10, 1402, 278, 9, 1142, 8, 5, 17021, 3184, 9, 5, 25099, 4383, 64, 28, 341, 7, 244, 27038, 5, 1300, 9, 5, 1272, 36, 909, 2233, 1548, 4839, 479, 716, 15, 5, 80, 8369, 6, 52, 33, 6818, 10, 346, 9, 47021, 25072, 5129, 31, 84, 1219, 254, 6, 11188, 2716, 6, 11, 84, 8944, 29015, 5564, 25099, 4383, 709, 1737, 6, 26862, 4, 10, 2964, 41421, 10437, 13905, 14, 209, 47021, 25072, 3625, 1477, 5, 37323, 47021, 676, 6, 8, 477, 5, 169, 7, 55, 937, 5139, 11, 5, 5209, 9, 41, 25099, 4383, 7, 1434, 4, 36, 740, 4839, 646, 10289, 742, 1493, 33931, 741, 4, 705, 4, 70, 659, 1875, 4, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 20734, 25606, 46195, 3748, 25606, 8257, 25606, 25099, 4383, 47021, 2]}.\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 424, in <module>\r\n",
      "    main()\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 370, in main\r\n",
      "    pad_to_multiple_of=8 if accelerator.use_fp16 else None,\r\n",
      "AttributeError: 'Accelerator' object has no attribute 'use_fp16'\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/utils/evaluate.py\", line 1079, in <module>\r\n",
      "    open(hyp_file_name) as f2, \\\r\n",
      "FileNotFoundError: [Errno 2] No such file or directory: '/kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/kp20k-original_hypotheses.txt'\r\n",
      "2025-02-11 07:03:00.377963: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "2025-02-11 07:03:00.399117: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "2025-02-11 07:03:00.405570: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "Inference on device: cuda:0\r\n",
      "Distributed environment: NO\r\n",
      "Num processes: 1\r\n",
      "Process index: 0\r\n",
      "Local process index: 0\r\n",
      "Device: cuda\r\n",
      "\r\n",
      "Mixed precision type: no\r\n",
      "\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/config.json\r\n",
      "Model config BartConfig {\r\n",
      "  \"_name_or_path\": \"/kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\",\r\n",
      "  \"activation_dropout\": 0.1,\r\n",
      "  \"activation_function\": \"gelu\",\r\n",
      "  \"add_bias_logits\": false,\r\n",
      "  \"add_final_layer_norm\": false,\r\n",
      "  \"architectures\": [\r\n",
      "    \"BartForConditionalGeneration\"\r\n",
      "  ],\r\n",
      "  \"attention_dropout\": 0.1,\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"classif_dropout\": 0.1,\r\n",
      "  \"classifier_dropout\": 0.0,\r\n",
      "  \"d_model\": 1024,\r\n",
      "  \"decoder_attention_heads\": 16,\r\n",
      "  \"decoder_ffn_dim\": 4096,\r\n",
      "  \"decoder_layerdrop\": 0.0,\r\n",
      "  \"decoder_layers\": 12,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"dropout\": 0.1,\r\n",
      "  \"early_stopping\": null,\r\n",
      "  \"encoder_attention_heads\": 16,\r\n",
      "  \"encoder_ffn_dim\": 4096,\r\n",
      "  \"encoder_layerdrop\": 0.0,\r\n",
      "  \"encoder_layers\": 12,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"gradient_checkpointing\": false,\r\n",
      "  \"id2label\": {\r\n",
      "    \"0\": \"LABEL_0\",\r\n",
      "    \"1\": \"LABEL_1\",\r\n",
      "    \"2\": \"LABEL_2\"\r\n",
      "  },\r\n",
      "  \"init_std\": 0.02,\r\n",
      "  \"is_encoder_decoder\": true,\r\n",
      "  \"label2id\": {\r\n",
      "    \"LABEL_0\": 0,\r\n",
      "    \"LABEL_1\": 1,\r\n",
      "    \"LABEL_2\": 2\r\n",
      "  },\r\n",
      "  \"max_position_embeddings\": 1024,\r\n",
      "  \"model_type\": \"bart\",\r\n",
      "  \"no_repeat_ngram_size\": null,\r\n",
      "  \"normalize_before\": false,\r\n",
      "  \"num_beams\": null,\r\n",
      "  \"num_hidden_layers\": 12,\r\n",
      "  \"pad_token_id\": 1,\r\n",
      "  \"scale_embedding\": false,\r\n",
      "  \"task_specific_params\": {\r\n",
      "    \"summarization\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 128,\r\n",
      "      \"min_length\": 12,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_cnn\": {\r\n",
      "      \"length_penalty\": 2.0,\r\n",
      "      \"max_length\": 142,\r\n",
      "      \"min_length\": 56,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_xsum\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 62,\r\n",
      "      \"min_length\": 11,\r\n",
      "      \"num_beams\": 6\r\n",
      "    }\r\n",
      "  },\r\n",
      "  \"torch_dtype\": \"float32\",\r\n",
      "  \"transformers_version\": \"4.47.0\",\r\n",
      "  \"use_cache\": true,\r\n",
      "  \"vocab_size\": 50265\r\n",
      "}\r\n",
      "\r\n",
      "loading file vocab.json\r\n",
      "loading file merges.txt\r\n",
      "loading file tokenizer.json\r\n",
      "loading file added_tokens.json\r\n",
      "loading file special_tokens_map.json\r\n",
      "loading file tokenizer_config.json\r\n",
      "loading file chat_template.jinja\r\n",
      "loading weights file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/model.safetensors\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "All model checkpoint weights were used when initializing BartForConditionalGeneration.\r\n",
      "\r\n",
      "All the weights of BartForConditionalGeneration were initialized from the model checkpoint at /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1.\r\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use BartForConditionalGeneration for predictions without further training.\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/generation_config.json\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"early_stopping\": true,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_bos_token_id\": 0,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"no_repeat_ngram_size\": 3,\r\n",
      "  \"num_beams\": 4,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "Loaded config, tokenizer, and model from /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\r\n",
      "Tokenizer: <class 'transformers.models.bart.tokenization_bart_fast.BartTokenizerFast'>\r\n",
      "You are resizing the embedding layer without providing a `pad_to_multiple_of` parameter. This means that the new embedding dimension will be 50265. This might induce some performance reduction as *Tensor Cores* will not be available. For more details about this, or help on choosing the correct value for resizing, refer to this guide: https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 424, in <module>\r\n",
      "    main()\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 359, in main\r\n",
      "    test_dataset = get_test_dataset(args, accelerator, tokenizer)\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 229, in get_test_dataset\r\n",
      "    raw_datasets = load_dataset(extension, data_files=data_files)\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 2129, in load_dataset\r\n",
      "    builder_instance = load_dataset_builder(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 1849, in load_dataset_builder\r\n",
      "    dataset_module = dataset_module_factory(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 1564, in dataset_module_factory\r\n",
      "    ).get_module()\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 944, in get_module\r\n",
      "    data_files = DataFilesDict.from_patterns(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 721, in from_patterns\r\n",
      "    else DataFilesList.from_patterns(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 624, in from_patterns\r\n",
      "    resolve_pattern(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 411, in resolve_pattern\r\n",
      "    raise FileNotFoundError(error_msg)\r\n",
      "FileNotFoundError: Unable to find '/kaggle/working/DeepKPG/data/inspec/json/test.json'\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/utils/evaluate.py\", line 1078, in <module>\r\n",
      "    with open(source_file_name) as f1, \\\r\n",
      "FileNotFoundError: [Errno 2] No such file or directory: 'data/inspec/fairseq/test.source'\r\n",
      "2025-02-11 07:03:11.991052: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "2025-02-11 07:03:12.012042: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "2025-02-11 07:03:12.018975: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "Inference on device: cuda:0\r\n",
      "Distributed environment: NO\r\n",
      "Num processes: 1\r\n",
      "Process index: 0\r\n",
      "Local process index: 0\r\n",
      "Device: cuda\r\n",
      "\r\n",
      "Mixed precision type: no\r\n",
      "\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/config.json\r\n",
      "Model config BartConfig {\r\n",
      "  \"_name_or_path\": \"/kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\",\r\n",
      "  \"activation_dropout\": 0.1,\r\n",
      "  \"activation_function\": \"gelu\",\r\n",
      "  \"add_bias_logits\": false,\r\n",
      "  \"add_final_layer_norm\": false,\r\n",
      "  \"architectures\": [\r\n",
      "    \"BartForConditionalGeneration\"\r\n",
      "  ],\r\n",
      "  \"attention_dropout\": 0.1,\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"classif_dropout\": 0.1,\r\n",
      "  \"classifier_dropout\": 0.0,\r\n",
      "  \"d_model\": 1024,\r\n",
      "  \"decoder_attention_heads\": 16,\r\n",
      "  \"decoder_ffn_dim\": 4096,\r\n",
      "  \"decoder_layerdrop\": 0.0,\r\n",
      "  \"decoder_layers\": 12,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"dropout\": 0.1,\r\n",
      "  \"early_stopping\": null,\r\n",
      "  \"encoder_attention_heads\": 16,\r\n",
      "  \"encoder_ffn_dim\": 4096,\r\n",
      "  \"encoder_layerdrop\": 0.0,\r\n",
      "  \"encoder_layers\": 12,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"gradient_checkpointing\": false,\r\n",
      "  \"id2label\": {\r\n",
      "    \"0\": \"LABEL_0\",\r\n",
      "    \"1\": \"LABEL_1\",\r\n",
      "    \"2\": \"LABEL_2\"\r\n",
      "  },\r\n",
      "  \"init_std\": 0.02,\r\n",
      "  \"is_encoder_decoder\": true,\r\n",
      "  \"label2id\": {\r\n",
      "    \"LABEL_0\": 0,\r\n",
      "    \"LABEL_1\": 1,\r\n",
      "    \"LABEL_2\": 2\r\n",
      "  },\r\n",
      "  \"max_position_embeddings\": 1024,\r\n",
      "  \"model_type\": \"bart\",\r\n",
      "  \"no_repeat_ngram_size\": null,\r\n",
      "  \"normalize_before\": false,\r\n",
      "  \"num_beams\": null,\r\n",
      "  \"num_hidden_layers\": 12,\r\n",
      "  \"pad_token_id\": 1,\r\n",
      "  \"scale_embedding\": false,\r\n",
      "  \"task_specific_params\": {\r\n",
      "    \"summarization\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 128,\r\n",
      "      \"min_length\": 12,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_cnn\": {\r\n",
      "      \"length_penalty\": 2.0,\r\n",
      "      \"max_length\": 142,\r\n",
      "      \"min_length\": 56,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_xsum\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 62,\r\n",
      "      \"min_length\": 11,\r\n",
      "      \"num_beams\": 6\r\n",
      "    }\r\n",
      "  },\r\n",
      "  \"torch_dtype\": \"float32\",\r\n",
      "  \"transformers_version\": \"4.47.0\",\r\n",
      "  \"use_cache\": true,\r\n",
      "  \"vocab_size\": 50265\r\n",
      "}\r\n",
      "\r\n",
      "loading file vocab.json\r\n",
      "loading file merges.txt\r\n",
      "loading file tokenizer.json\r\n",
      "loading file added_tokens.json\r\n",
      "loading file special_tokens_map.json\r\n",
      "loading file tokenizer_config.json\r\n",
      "loading file chat_template.jinja\r\n",
      "loading weights file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/model.safetensors\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "All model checkpoint weights were used when initializing BartForConditionalGeneration.\r\n",
      "\r\n",
      "All the weights of BartForConditionalGeneration were initialized from the model checkpoint at /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1.\r\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use BartForConditionalGeneration for predictions without further training.\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/generation_config.json\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"early_stopping\": true,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_bos_token_id\": 0,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"no_repeat_ngram_size\": 3,\r\n",
      "  \"num_beams\": 4,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "Loaded config, tokenizer, and model from /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\r\n",
      "Tokenizer: <class 'transformers.models.bart.tokenization_bart_fast.BartTokenizerFast'>\r\n",
      "You are resizing the embedding layer without providing a `pad_to_multiple_of` parameter. This means that the new embedding dimension will be 50265. This might induce some performance reduction as *Tensor Cores* will not be available. For more details about this, or help on choosing the correct value for resizing, refer to this guide: https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 424, in <module>\r\n",
      "    main()\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 359, in main\r\n",
      "    test_dataset = get_test_dataset(args, accelerator, tokenizer)\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 229, in get_test_dataset\r\n",
      "    raw_datasets = load_dataset(extension, data_files=data_files)\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 2129, in load_dataset\r\n",
      "    builder_instance = load_dataset_builder(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 1849, in load_dataset_builder\r\n",
      "    dataset_module = dataset_module_factory(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 1564, in dataset_module_factory\r\n",
      "    ).get_module()\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 944, in get_module\r\n",
      "    data_files = DataFilesDict.from_patterns(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 721, in from_patterns\r\n",
      "    else DataFilesList.from_patterns(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 624, in from_patterns\r\n",
      "    resolve_pattern(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 411, in resolve_pattern\r\n",
      "    raise FileNotFoundError(error_msg)\r\n",
      "FileNotFoundError: Unable to find '/kaggle/working/DeepKPG/data/krapivin/json/test.json'\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/utils/evaluate.py\", line 1078, in <module>\r\n",
      "    with open(source_file_name) as f1, \\\r\n",
      "FileNotFoundError: [Errno 2] No such file or directory: 'data/krapivin/fairseq/test.source'\r\n",
      "2025-02-11 07:03:23.516706: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "2025-02-11 07:03:23.537464: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "2025-02-11 07:03:23.543876: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "Inference on device: cuda:0\r\n",
      "Distributed environment: NO\r\n",
      "Num processes: 1\r\n",
      "Process index: 0\r\n",
      "Local process index: 0\r\n",
      "Device: cuda\r\n",
      "\r\n",
      "Mixed precision type: no\r\n",
      "\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/config.json\r\n",
      "Model config BartConfig {\r\n",
      "  \"_name_or_path\": \"/kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\",\r\n",
      "  \"activation_dropout\": 0.1,\r\n",
      "  \"activation_function\": \"gelu\",\r\n",
      "  \"add_bias_logits\": false,\r\n",
      "  \"add_final_layer_norm\": false,\r\n",
      "  \"architectures\": [\r\n",
      "    \"BartForConditionalGeneration\"\r\n",
      "  ],\r\n",
      "  \"attention_dropout\": 0.1,\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"classif_dropout\": 0.1,\r\n",
      "  \"classifier_dropout\": 0.0,\r\n",
      "  \"d_model\": 1024,\r\n",
      "  \"decoder_attention_heads\": 16,\r\n",
      "  \"decoder_ffn_dim\": 4096,\r\n",
      "  \"decoder_layerdrop\": 0.0,\r\n",
      "  \"decoder_layers\": 12,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"dropout\": 0.1,\r\n",
      "  \"early_stopping\": null,\r\n",
      "  \"encoder_attention_heads\": 16,\r\n",
      "  \"encoder_ffn_dim\": 4096,\r\n",
      "  \"encoder_layerdrop\": 0.0,\r\n",
      "  \"encoder_layers\": 12,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"gradient_checkpointing\": false,\r\n",
      "  \"id2label\": {\r\n",
      "    \"0\": \"LABEL_0\",\r\n",
      "    \"1\": \"LABEL_1\",\r\n",
      "    \"2\": \"LABEL_2\"\r\n",
      "  },\r\n",
      "  \"init_std\": 0.02,\r\n",
      "  \"is_encoder_decoder\": true,\r\n",
      "  \"label2id\": {\r\n",
      "    \"LABEL_0\": 0,\r\n",
      "    \"LABEL_1\": 1,\r\n",
      "    \"LABEL_2\": 2\r\n",
      "  },\r\n",
      "  \"max_position_embeddings\": 1024,\r\n",
      "  \"model_type\": \"bart\",\r\n",
      "  \"no_repeat_ngram_size\": null,\r\n",
      "  \"normalize_before\": false,\r\n",
      "  \"num_beams\": null,\r\n",
      "  \"num_hidden_layers\": 12,\r\n",
      "  \"pad_token_id\": 1,\r\n",
      "  \"scale_embedding\": false,\r\n",
      "  \"task_specific_params\": {\r\n",
      "    \"summarization\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 128,\r\n",
      "      \"min_length\": 12,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_cnn\": {\r\n",
      "      \"length_penalty\": 2.0,\r\n",
      "      \"max_length\": 142,\r\n",
      "      \"min_length\": 56,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_xsum\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 62,\r\n",
      "      \"min_length\": 11,\r\n",
      "      \"num_beams\": 6\r\n",
      "    }\r\n",
      "  },\r\n",
      "  \"torch_dtype\": \"float32\",\r\n",
      "  \"transformers_version\": \"4.47.0\",\r\n",
      "  \"use_cache\": true,\r\n",
      "  \"vocab_size\": 50265\r\n",
      "}\r\n",
      "\r\n",
      "loading file vocab.json\r\n",
      "loading file merges.txt\r\n",
      "loading file tokenizer.json\r\n",
      "loading file added_tokens.json\r\n",
      "loading file special_tokens_map.json\r\n",
      "loading file tokenizer_config.json\r\n",
      "loading file chat_template.jinja\r\n",
      "loading weights file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/model.safetensors\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "All model checkpoint weights were used when initializing BartForConditionalGeneration.\r\n",
      "\r\n",
      "All the weights of BartForConditionalGeneration were initialized from the model checkpoint at /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1.\r\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use BartForConditionalGeneration for predictions without further training.\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/generation_config.json\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"early_stopping\": true,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_bos_token_id\": 0,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"no_repeat_ngram_size\": 3,\r\n",
      "  \"num_beams\": 4,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "Loaded config, tokenizer, and model from /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\r\n",
      "Tokenizer: <class 'transformers.models.bart.tokenization_bart_fast.BartTokenizerFast'>\r\n",
      "You are resizing the embedding layer without providing a `pad_to_multiple_of` parameter. This means that the new embedding dimension will be 50265. This might induce some performance reduction as *Tensor Cores* will not be available. For more details about this, or help on choosing the correct value for resizing, refer to this guide: https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 424, in <module>\r\n",
      "    main()\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 359, in main\r\n",
      "    test_dataset = get_test_dataset(args, accelerator, tokenizer)\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 229, in get_test_dataset\r\n",
      "    raw_datasets = load_dataset(extension, data_files=data_files)\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 2129, in load_dataset\r\n",
      "    builder_instance = load_dataset_builder(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 1849, in load_dataset_builder\r\n",
      "    dataset_module = dataset_module_factory(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 1564, in dataset_module_factory\r\n",
      "    ).get_module()\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 944, in get_module\r\n",
      "    data_files = DataFilesDict.from_patterns(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 721, in from_patterns\r\n",
      "    else DataFilesList.from_patterns(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 624, in from_patterns\r\n",
      "    resolve_pattern(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 411, in resolve_pattern\r\n",
      "    raise FileNotFoundError(error_msg)\r\n",
      "FileNotFoundError: Unable to find '/kaggle/working/DeepKPG/data/nus/json/test.json'\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/utils/evaluate.py\", line 1078, in <module>\r\n",
      "    with open(source_file_name) as f1, \\\r\n",
      "FileNotFoundError: [Errno 2] No such file or directory: 'data/nus/fairseq/test.source'\r\n",
      "2025-02-11 07:03:35.099337: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "2025-02-11 07:03:35.120788: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "2025-02-11 07:03:35.127145: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "Inference on device: cuda:0\r\n",
      "Distributed environment: NO\r\n",
      "Num processes: 1\r\n",
      "Process index: 0\r\n",
      "Local process index: 0\r\n",
      "Device: cuda\r\n",
      "\r\n",
      "Mixed precision type: no\r\n",
      "\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/config.json\r\n",
      "Model config BartConfig {\r\n",
      "  \"_name_or_path\": \"/kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\",\r\n",
      "  \"activation_dropout\": 0.1,\r\n",
      "  \"activation_function\": \"gelu\",\r\n",
      "  \"add_bias_logits\": false,\r\n",
      "  \"add_final_layer_norm\": false,\r\n",
      "  \"architectures\": [\r\n",
      "    \"BartForConditionalGeneration\"\r\n",
      "  ],\r\n",
      "  \"attention_dropout\": 0.1,\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"classif_dropout\": 0.1,\r\n",
      "  \"classifier_dropout\": 0.0,\r\n",
      "  \"d_model\": 1024,\r\n",
      "  \"decoder_attention_heads\": 16,\r\n",
      "  \"decoder_ffn_dim\": 4096,\r\n",
      "  \"decoder_layerdrop\": 0.0,\r\n",
      "  \"decoder_layers\": 12,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"dropout\": 0.1,\r\n",
      "  \"early_stopping\": null,\r\n",
      "  \"encoder_attention_heads\": 16,\r\n",
      "  \"encoder_ffn_dim\": 4096,\r\n",
      "  \"encoder_layerdrop\": 0.0,\r\n",
      "  \"encoder_layers\": 12,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"gradient_checkpointing\": false,\r\n",
      "  \"id2label\": {\r\n",
      "    \"0\": \"LABEL_0\",\r\n",
      "    \"1\": \"LABEL_1\",\r\n",
      "    \"2\": \"LABEL_2\"\r\n",
      "  },\r\n",
      "  \"init_std\": 0.02,\r\n",
      "  \"is_encoder_decoder\": true,\r\n",
      "  \"label2id\": {\r\n",
      "    \"LABEL_0\": 0,\r\n",
      "    \"LABEL_1\": 1,\r\n",
      "    \"LABEL_2\": 2\r\n",
      "  },\r\n",
      "  \"max_position_embeddings\": 1024,\r\n",
      "  \"model_type\": \"bart\",\r\n",
      "  \"no_repeat_ngram_size\": null,\r\n",
      "  \"normalize_before\": false,\r\n",
      "  \"num_beams\": null,\r\n",
      "  \"num_hidden_layers\": 12,\r\n",
      "  \"pad_token_id\": 1,\r\n",
      "  \"scale_embedding\": false,\r\n",
      "  \"task_specific_params\": {\r\n",
      "    \"summarization\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 128,\r\n",
      "      \"min_length\": 12,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_cnn\": {\r\n",
      "      \"length_penalty\": 2.0,\r\n",
      "      \"max_length\": 142,\r\n",
      "      \"min_length\": 56,\r\n",
      "      \"num_beams\": 4\r\n",
      "    },\r\n",
      "    \"summarization_xsum\": {\r\n",
      "      \"length_penalty\": 1.0,\r\n",
      "      \"max_length\": 62,\r\n",
      "      \"min_length\": 11,\r\n",
      "      \"num_beams\": 6\r\n",
      "    }\r\n",
      "  },\r\n",
      "  \"torch_dtype\": \"float32\",\r\n",
      "  \"transformers_version\": \"4.47.0\",\r\n",
      "  \"use_cache\": true,\r\n",
      "  \"vocab_size\": 50265\r\n",
      "}\r\n",
      "\r\n",
      "loading file vocab.json\r\n",
      "loading file merges.txt\r\n",
      "loading file tokenizer.json\r\n",
      "loading file added_tokens.json\r\n",
      "loading file special_tokens_map.json\r\n",
      "loading file tokenizer_config.json\r\n",
      "loading file chat_template.jinja\r\n",
      "loading weights file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/model.safetensors\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "All model checkpoint weights were used when initializing BartForConditionalGeneration.\r\n",
      "\r\n",
      "All the weights of BartForConditionalGeneration were initialized from the model checkpoint at /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1.\r\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use BartForConditionalGeneration for predictions without further training.\r\n",
      "loading configuration file /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1/generation_config.json\r\n",
      "Generate config GenerationConfig {\r\n",
      "  \"bos_token_id\": 0,\r\n",
      "  \"decoder_start_token_id\": 2,\r\n",
      "  \"early_stopping\": true,\r\n",
      "  \"eos_token_id\": 2,\r\n",
      "  \"forced_bos_token_id\": 0,\r\n",
      "  \"forced_eos_token_id\": 2,\r\n",
      "  \"no_repeat_ngram_size\": 3,\r\n",
      "  \"num_beams\": 4,\r\n",
      "  \"pad_token_id\": 1\r\n",
      "}\r\n",
      "\r\n",
      "Loaded config, tokenizer, and model from /kaggle/working/DeepKPG/results/bart-large/20250211-0644_kp20k-original_checkpoints_bart-large_lr5e-5_polynomial_seed1234_epoch1\r\n",
      "Tokenizer: <class 'transformers.models.bart.tokenization_bart_fast.BartTokenizerFast'>\r\n",
      "You are resizing the embedding layer without providing a `pad_to_multiple_of` parameter. This means that the new embedding dimension will be 50265. This might induce some performance reduction as *Tensor Cores* will not be available. For more details about this, or help on choosing the correct value for resizing, refer to this guide: https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 424, in <module>\r\n",
      "    main()\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 359, in main\r\n",
      "    test_dataset = get_test_dataset(args, accelerator, tokenizer)\r\n",
      "  File \"/kaggle/working/DeepKPG/sequence_generation/seq2seq/run_decode_kpgen_seq2seq_hf.py\", line 229, in get_test_dataset\r\n",
      "    raw_datasets = load_dataset(extension, data_files=data_files)\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 2129, in load_dataset\r\n",
      "    builder_instance = load_dataset_builder(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 1849, in load_dataset_builder\r\n",
      "    dataset_module = dataset_module_factory(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 1564, in dataset_module_factory\r\n",
      "    ).get_module()\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/load.py\", line 944, in get_module\r\n",
      "    data_files = DataFilesDict.from_patterns(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 721, in from_patterns\r\n",
      "    else DataFilesList.from_patterns(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 624, in from_patterns\r\n",
      "    resolve_pattern(\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/datasets/data_files.py\", line 411, in resolve_pattern\r\n",
      "    raise FileNotFoundError(error_msg)\r\n",
      "FileNotFoundError: Unable to find '/kaggle/working/DeepKPG/data/semeval/json/test.json'\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/DeepKPG/utils/evaluate.py\", line 1078, in <module>\r\n",
      "    with open(source_file_name) as f1, \\\r\n",
      "FileNotFoundError: [Errno 2] No such file or directory: 'data/semeval/fairseq/test.source'\r\n"
     ]
    }
   ],
   "source": [
    "# Pindah ke direktori yang berisi script\n",
    "%cd /kaggle/working/DeepKPG\n",
    "\n",
    "# Jalankan script\n",
    "!bash sequence_generation/seq2seq/run_bart_large.sh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "944aecaa",
   "metadata": {
    "papermill": {
     "duration": 0.020639,
     "end_time": "2025-02-11T07:03:42.167661",
     "exception": false,
     "start_time": "2025-02-11T07:03:42.147022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6640811,
     "sourceId": 10713933,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6643939,
     "sourceId": 10718670,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30886,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1190.575813,
   "end_time": "2025-02-11T07:03:42.507840",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-11T06:43:51.932027",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
